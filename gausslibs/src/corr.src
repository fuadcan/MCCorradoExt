/*
** corr.src
** (C) Copyright 1988-2003 by Aptech Systems, Inc.
** All Rights Reserved.
**
** This Software Product is PROPRIETARY SOURCE CODE OF APTECH
** SYSTEMS, INC.    This File Header must accompany all files using
** any portion, in whole or in part, of this Source Code.   In
** addition, the right to create such files is strictly limited by
** Section 2.A. of the GAUSS Applications License Agreement
** accompanying this Software Product.
**
** If you wish to distribute any portion of the proprietary Source
** Code, in whole or in part, you must first obtain written
** permission from Aptech Systems.
**
**  Format            Purpose                                        Line
** =========================================================================
** cx = CORRM(m);     correlation matrix from moment matrix.          27
** cx = CORRVC(vc);   correlation matrix from var-covar matrix.       89
** cx = CORRX(x);     correlation matrix from data matrix.           133
** vc = VCM(m);       var-covar matrix from moment matrix.           187
** vc = VCX(x);       var-covar matrix from data matrix.             249
*/

/*
**> corrm
**
**  Purpose:    Computes correlation matrix from moment (x'x) matrix.
**
**  Format:     cx = corrm(m);
**
**  Input:      m     KxK moment (x'x) matrix. Constant term MUST have been
**                    the first variable when moment matrix was computed.
**
**  Output:     cx    KxK correlation matrix.
*/

proc corrm(m);
    local cc,xx,n,xbar,vv,vc,std,dims,orders,index,neworders,a;
    /* check for complex input */
    if iscplx(m);
        if hasimag(m);
            errorlog "ERROR: Not implemented for complex arguments.";
            end;
        else;
            m = real(m);
        endif;
    endif;

    if (type(m) == 6);
        cc = seqa(2,1,cols(m)-1);
        xx = m[cc,cc];                  /* Pull out K-1xK-1 submatrix */
        n = m[1,1];                     /* Number of observations. */
        xbar = m[cc,1]/n;               /* Vector of means */
        vv = xbar*xbar';
        vc = (xx-n*vv)/(n-1);           /* VC matrix */
        std = sqrt(diag(vc));
        retp( vc./(std.*std') );
    elseif (type(m) == 21);
        dims = getdims(m);
        orders = getorders(m);
        
        if (dims > 2 );
            index = ones(dims-2,1);
            neworders = orders[1:dims-2];
            neworders = neworders||orders[dims-1]-1||orders[dims]-1;
            a = arrayalloc(neworders,0);

            loopni:
                setarray a, index, corrm(getmatrix(m,index));
                loopnextindex loopni, index, orders;
        else;
            if (dims == 1);
                neworders = orders-1;    
            else;
                neworders = orders[dims-1]||orders[dims];
            endif;
            a = mattoarray(corrm(arraytomat(m)));
        endif;
         
        retp(a);
    else;
        errorlog "ERROR: Type mismatch.";
    endif;
endp;

/*
**> corrvc
**
**  Purpose:    Computes a correlation matrix from a
**              variance-covariance matrix.
**
**  Format:     cx = corrvc(vc);
**
**  Input:      vc    KxK variance-covariance matrix (of data or parameters).
**
**  Output:     cx    KxK correlation matrix.
*/

proc corrvc(vc);
    local std, dims, torders;
    /* check for complex input */
    if iscplx(vc);
        if hasimag(vc);
            errorlog "ERROR: Not implemented for complex arguments.";
            end;
        else;
            vc = real(vc);
        endif;
    endif;
    std = sqrt(diag(vc));

    if (type(vc) == 6);
        retp( vc./(std.*std') );
    elseif (type(vc) == 21);
        dims = getdims(vc);
        if (dims < 3);
            vc = arraytomat(vc);
            std = arraytomat(std);
            retp( mattoarray(vc./(std.*std')) );
        else;
            torders = seqa(1,1,dims-2);
            torders = torders||dims||dims-1;
            retp( vc./(std.*atranspose(std,torders)) );
        endif;
    else;
        errorlog "ERROR: Type mismatch.";
    endif;
endp;

/*
**> corrx
**
**  Purpose:    Computes correlation matrix.
**
**  Format:     cx = corrx(x);
**
**  Input:      x     NxK matrix of data.
**
**  Output:     cx    KxK correlation matrix of columns of x.
*/

proc corrx(x);
    local vc, std, dims, orders, torders;
    /* check for complex input */
    if iscplx(x);
        if hasimag(x);
            errorlog "ERROR: Not implemented for complex arguments.";
            end;
        else;
            x = real(x);
        endif;
    endif;

    if (type(x) == 6);
        vc = moment(x-meanc(x)',0)/(rows(x)-1);         /* variance-covariance
                                                        :: matrix
                                                        */
        std = sqrt(diag(vc));           /* standard deviations */
        retp( vc./(std.*std') );
    elseif (type(x) == 21);
        dims = getdims(x);
        if (dims < 3);
            x = arraytomat(x);
            vc = moment(x-meanc(x)',0)/(rows(x)-1);         /* variance-covariance
                                                            :: matrix
                                                            */
            std = sqrt(diag(vc));           /* standard deviations */
            retp( mattoarray(vc./(std.*std')) );
        else;
            orders = getorders(x);
            torders = seqa(1,1,dims-2);
            torders = torders||dims||dims-1;
            vc = moment(x-amean(x,2),0)/(orders[dims-1]-1);         /* variance-covariance
                                                                    :: matrix
                                                                    */
            std = sqrt(diag(vc));           /* standard deviations */
            retp( vc./(std.*atranspose(std,torders)) );
        endif;
    else;
        errorlog "ERROR: Type mismatch.";
    endif;
endp;

/*
**> vcm
**
**  Purpose:    Computes a variance-covariance matrix from
**              a moment matrix.
**
**  Format:     vc = vcm(m);
**
**  Input:      m    KxK moment (x'x) matrix. Constant term MUST have
**                   been first variable when moment matrix was computed.
**
**  Output:     vc   KxK variance-covariance matrix.
*/

proc vcm(m);
    local cc, xx, n, xbar, vv, orders, dims, index, neworders, a;

    /* check for complex input */
    if iscplx(m);
        if hasimag(m);
            errorlog "ERROR: Not implemented for complex arguments.";
            end;
        else;
            m = real(m);
        endif;
    endif;

    if (type(m) == 6);
        cc = seqa(2,1,cols(m)-1);
        xx = m[cc,cc];                  /* Pull out K-1xK-1 submatrix */
        n = m[1,1];                     /* Number of observations. */
        xbar = m[cc,1]/n;               /* Vector of means */
        vv = xbar*xbar';
        retp( (xx-n*(vv))/(n-1) );
    elseif (type(m) == 21);
        dims = getdims(m);
        orders = getorders(m);
        
        if (dims > 2 );
            index = ones(dims-2,1);
            neworders = orders[1:dims-2];
            neworders = neworders||orders[dims-1]-1||orders[dims]-1;
            a = arrayalloc(neworders,0);

            loopni:
                setarray a, index, vcm(getmatrix(m,index));
                loopnextindex loopni, index, orders;
        else;
            if (dims == 1);
                neworders = orders-1;    
            else;
                neworders = orders[dims-1]||orders[dims];
            endif;
            a = mattoarray(vcm(arraytomat(m)));
        endif;
         
        retp(a);
    else;
        errorlog "ERROR: Type mismatch.";
    endif;
endp;

/*
**> vcx
**
**  Purpose:    Computes a variance-covariance matrix from a data matrix.
**
**  Format:     vc = vcx(x);
**
**  Input:      x    NxK matrix of data.
**
**  Output:     vc   KxK var-covar matrix.
*/

proc vcx(x);
    local orders;

    /* check for complex input */
    if iscplx(x);
        if hasimag(x);
            errorlog "ERROR: Not implemented for complex arguments.";
            end;
        else;
            x = real(x);
        endif;
    endif;

    if (type(x) == 6);
        retp( moment( x-meanc(x)',0) / ( rows(x) - 1 ) );
    elseif (type(x) == 21);
        if (getdims(x) == 1);
            x = areshape(x,1|getorders(x));
        endif;
        orders = getorders(x);
        retp( moment( x-amean(x,2),0) / ( orders[getdims(x)-1] - 1 ) );
    else;
        errorlog "ERROR: Type mismatch.";
    endif;
endp;

