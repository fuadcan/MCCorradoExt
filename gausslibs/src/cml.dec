/*
** cml.dec - definitions for globals used in CML
**
** (C) Copyright 1994-2001 by Aptech Systems, Inc.
** All Rights Reserved.
**
** This Software Product is PROPRIETARY SOURCE CODE OF APTECH
** SYSTEMS, INC.    This File Header must accompany all files using
** any portion, in whole or in part, of this Source Code.   In
** addition, the right to create such files is strictly limited by
** Section 2.A. of the GAUSS Applications License Agreement
** accompanying this Software Product.
**
** If you wish to distribute any portion of the proprietary Source
** Code, in whole or in part, you must first obtain written
** permission from Aptech Systems.
**
**-------------------**------------------**-------------------**-----------**
**-------------------**------------------**-------------------**-----------**
*/

/* Version info:  major version | minor version | revision */
declare matrix _cml_ver = { 2, 0, 4 };

declare matrix _cml_Algorithm = 3;  /* optimization algorithm */
declare matrix _cml_CovPar = 1;     /* selects covariance matrix of */
                                       /* parameters */
declare matrix _cml_ParNames = 0;   /* parameter names */
declare matrix _cml_LineSearch = 2; /* selects type of line search */
declare matrix _cml_DirTol = 1e-5;  /* convergence tolerance for */
                                       /* gradient */
declare matrix _cml_HessProc = 0;   /* procedure to compute hessian */
declare matrix _cml_GradProc = 0;   /* procedure to compute gradient */
declare matrix _cml_GradMethod = 0; /* numerical gradient method */
declare matrix _cml_MaxIters = 1e+5;  /* maximum number of iterations */
declare matrix _cml_IterData = {.,.,.};   /* elapsed time, */
                                         /* # of iters,   */
                                         /* cov method    */
declare matrix _cml_UserSearch = 0;      /* interactive line search */
declare matrix _cml_UserNumGrad = 0;
declare matrix _cml_UserNumHess = 0;
declare matrix _cml_Extrap = 2.0;    /* extrapolation constant */
declare matrix _cml_Interp = 0.25;   /* interpolation constant */
declare matrix _cml_Delta = 0;
declare matrix _cml_MaxTry = 100;
declare matrix _cml_Options = 0;
declare matrix _cml_Lag = 0;       /* number of lags in model */
declare matrix _cml_FinalHess = 0; /* stores hessian used in the */
                                   /* computation of the covariance */
                                   /* matrix of parameters */
declare matrix _cml_NumObs = 0;    /* rows in transformed data matrix */
declare matrix _cml_HessCov = {.}; /* Hessian matrix covariance matrix */
                                   /* of parameters */
declare matrix _cml_XprodCov = {.};   /* cross product covariance */
                                   /* matrix of parameters */
declare matrix _cml_Key = 1;       /* controls keyboard trap 1-on, 2-off */
declare matrix _cml_MaxTime = 1e5;
declare matrix _cml_Active = 1;
declare matrix _cml_GradStep = { . };/* size of increment for computing */
                                     /* numerical gradient */
declare matrix _cml_GradCheckTol = 0;
declare matrix _cml_Diagnostic = {.};

declare matrix _cml_Increment = 0;    /* if nonzero, histogram increments */
declare matrix _cml_Center = 0;   /* if nonzero, center points for histogram */
declare matrix _cml_Width = 2;    /* width of histogram = _cml_Width * sd's */
declare matrix _cml_NumSample = 50; /* bootstrap sample size */
declare matrix _cml_NumCat = 16;    /* # of cat's for bootstrapped histogram */
declare matrix _cml_Select = {.};
declare string _cml_BootFname = "";
declare matrix _cml_PriorProc = {.};
declare matrix _cml_BayesAlpha = 1.4;
declare matrix _cml_Kernel = 1;
declare matrix _cml_Smoothing = 0;
declare matrix _cml_EndPoints = {0 0};
declare matrix _cml_NumPoints = 100;
declare matrix _cml_Truncate = {0 0};
declare matrix _cml_Alpha = .05;
declare matrix _cml_Switch = { 1 3, 1e-4 1e-4, 20 10, 1e-6 1e-6 };
declare matrix _cml_DFTol = {.};
declare matrix _cml_FeasibleTest = 1;
declare matrix _cml_InfCorr = 1;
declare matrix _cml_GridSearch = 1;
declare matrix _cml_GridSearchRadius = .01;
declare matrix _cml_Trust = 0;
declare matrix _cml_TrustRadius = .1;
declare matrix _cml_State = 345678;
declare matrix _cml_RandType = 1;
declare matrix _cml_GradCoefs = 0;
declare matrix _cml_GradOrder = 0;

declare matrix _cml_A = {.};
declare matrix _cml_B = {.};
declare matrix _cml_C = {.};
declare matrix _cml_D = {.};
declare matrix _cml_Bounds = {.};
declare matrix _cml_EqProc = {.};
declare matrix _cml_IneqProc = {.};
declare matrix _cml_EqJacobian = {.};
declare matrix _cml_IneqJacobian = {.};
declare matrix _cml_Lagrange = 0;

declare matrix _cml_eps2 = 6.0554544523933429e-6;
declare matrix _cml_eps3 = 1.4933184523068080e-8;
declare string _cml_dsn = "";
