DECLARE _eigerr != 0 ;
/*
** JCRIT
**
** Purpose:    Returns critical values for the J(p,q) statistic,
**             Computed using 2500 iterations and 500 observations.
**
** Format:     c-values = jcrit(p,q);
**
**             p     -- order of the time-polynomial in the null hypothesis
**             q     -- order of the time-polynomoal in the fitted regression
**
*/
proc jcrit(p,q) ;
     local jc, i ;
     let jc[42,6] =
     0.00107180 0.0205172 0.0714582   8.32431   11.7885   20.9208
     0.0519788  0.270541  0.637949   28.8492   39.5338   78.5209
      0.214233  0.717328   1.18753   40.5929   63.8283   109.552
      0.427201   1.10257   1.84945   54.9556   74.7017   140.492
      0.643955   1.66959   2.60643   64.8727   97.7293   173.574
      0.801434   1.97288   3.19687   80.6316   119.679   205.702
     0.000196702 0.00514436 0.0236420   5.19576   7.35686   17.2481
     0.0305338  0.136833  0.242532   8.38526   12.3139   22.7007
      0.104149  0.357789  0.605886   11.6603   16.9075   31.5211
      0.238625  0.589331  0.888953   14.2615   20.3936   37.7203
      0.419589  0.853960   1.29684   17.3515   24.0280   41.4941
      0.521823   1.11569   1.54805   21.5954   30.0503   48.8962
     8.48213E-005 0.00220373 0.00979294   1.82005   2.74932   5.21620
     0.0100085 0.0654700  0.115967   2.64190   3.62361   6.15172
     0.0554527  0.155769  0.259790   4.10570   5.40713   9.23626
      0.116631  0.293655  0.454436   5.17464   6.84125   11.6389
      0.195374  0.416370  0.606698   6.36058   8.52972   13.0446
      0.303570  0.609157  0.848635   7.29064   9.88016   15.8192
     3.67725E-005 0.00161532 0.00621955   1.08988   1.55074   2.63083
     0.00643190 0.0341369 0.0723544   1.78721   2.29998   3.53964
     0.0369344  0.113835  0.189845   2.70487   3.48280   5.76540
     0.0797553  0.177960  0.304723   3.48556   4.57756   7.06036
      0.152349  0.297034  0.432689   3.95869   4.97144   8.35702
      0.242917  0.434832  0.597945   4.57480   5.73900   9.39981
     3.88274E-005 0.000898215 0.00458721  0.774960   1.08939   1.92471
     0.00548749 0.0271226 0.0536502   1.30671   1.64886   2.53443
     0.0370907 0.0828643  0.142883   1.88482   2.47062   4.25667
     0.0635456  0.151567  0.238114   2.32581   3.06732   4.77040
      0.110551  0.223140  0.316752   2.75891   3.43842   5.56500
      0.157436  0.320430  0.449751   3.23074   4.06023   6.76721
     1.72993E-005 0.000836363 0.00376620  0.597227  0.855310   1.54580
     0.00351993 0.0201446 0.0448695   1.03341   1.34260   2.10498
     0.0226900 0.0725813  0.118519   1.47714   1.93583   2.95746
     0.0458234  0.119785  0.180359   1.78683   2.39353   4.03406
      0.105465  0.200639  0.276411   2.31718   2.85518   4.57054
      0.153064  0.249195  0.352460   2.63295   3.34334   5.00488
     2.66160E-005 0.000900911 0.00357452  0.507448  0.728089   1.30758
     0.00452386 0.0159268 0.0353007  0.823350   1.08700   1.79438
     0.0168792 0.0495003 0.0853012   1.15869   1.53544   2.48833
     0.0430411  0.102228  0.157147   1.48540   1.89844   2.97122
     0.0753796  0.168206  0.254938   1.80506   2.41870   3.74138
      0.101394  0.228091  0.298155   2.16901   2.66952   3.92965 ;
     if ((p>5) OR (p<-1));
        retp((0~0~0~0~0~0)');
     endif ;
     if ((q-p) > 6) ;
        retp((0~0~0~0~0~0)');
     endif ;
     i = (p+1)*6 + (q-p) ;
retp(jc[i,.]');
endp ;
/*
** ZACRIT
**
** Purpose:    Returns critical values for the Za statistic, depending on the
**             value of p and the number of observations.
**             Computed using 10000 iterations.
**
** Format:     c-values = zacrit(nobs,p);
**
** Input:      nobs  -- number of observations in the series.
**
**             p     -- order of the time-polynomial in the null hypothesis
**
*/
proc zacrit(nobs,p) ;
     local za, i ;
     let za[70,6] =
  -12.7373   -7.56408   -5.49383   0.961220    1.33035    2.16541
  -18.5354   -12.9295   -10.4317  -0.720203 -0.0196524    1.24032
  -25.2438   -19.3033   -16.5499   -3.64388   -2.56553  -0.627704
  -30.5744   -24.3991   -21.3611   -6.36192   -5.07227   -2.67051
  -35.0775   -28.7012   -25.3550   -9.04005   -7.48628   -4.77596
  -38.4996   -32.4208   -29.3272   -11.8811   -10.1905   -7.25362
  -42.4844   -36.6317   -33.1024   -14.3634   -12.3512   -9.11136
  -12.6659   -7.83927   -5.66818   0.939938    1.28777    2.08202
  -19.7950   -13.8776   -11.1587  -0.840616 -0.0840653    1.18607
  -27.4162   -20.4843   -17.3881   -3.86838   -2.60421  -0.770390
  -33.9379   -26.0156   -22.5492   -6.52959   -5.20139   -3.03172
  -39.7563   -31.6632   -27.8009   -9.53591   -7.82894   -5.23852
  -43.5637   -35.7682   -32.0346   -12.1452   -10.2447   -7.27119
  -48.2433   -40.4164   -36.5421   -15.1551   -12.9602   -9.75841
  -13.3651   -7.90243   -5.49412   0.966783    1.33650    2.07938
  -19.6059   -13.6920   -10.8721  -0.787890 -0.0876999   0.950561
  -27.6148   -20.8365   -17.6165   -3.83694   -2.75056  -0.842735
  -34.1097   -26.7986   -23.1600   -6.45046   -5.10047   -3.11105
  -40.3925   -32.0060   -28.2785   -9.47110   -7.79140   -4.92818
  -45.0052   -37.2253   -33.2177   -12.2821   -10.5302   -7.43202
  -50.7937   -42.0508   -37.5427   -15.3238   -13.2086   -9.74212
  -13.3692   -7.89486   -5.71541   0.948937    1.30801    2.10497
  -19.9486   -13.9913   -11.1586  -0.787331 -0.0269699    1.13741
  -27.9931   -21.1576   -17.9186   -3.81026   -2.71870  -0.837992
  -35.0490   -27.1940   -23.6709   -6.65487   -5.23550   -3.07231
  -40.3521   -32.4850   -28.5775   -9.51853   -7.78194   -5.01251
  -47.1751   -38.3098   -33.8658   -12.4618   -10.6589   -7.46650
  -52.0322   -42.8655   -38.5399   -15.4223   -13.2436   -9.67028
  -14.0823   -8.28333   -5.99486   0.920818    1.27140    2.03340
  -21.4999   -13.8070   -11.0928  -0.801395 -0.0878569    1.03688
  -28.7263   -21.1196   -17.8070   -3.81068   -2.60889  -0.808609
  -35.5745   -27.3003   -23.5516   -6.60335   -5.17860   -2.97227
  -40.0782   -32.7493   -28.7561   -9.32977   -7.68120   -5.07795
  -47.3737   -38.0954   -33.6989   -12.3234   -10.4146   -7.42645
  -53.7801   -43.6899   -38.8826   -15.1766   -13.1545   -9.67188
  -13.9719   -8.17224   -5.76096   0.950562    1.31583    2.11471
  -20.3875   -13.8683   -11.2052  -0.916779  -0.220714   0.941118
  -28.9907   -21.6472   -17.9439   -3.69759   -2.64268  -0.807373
  -35.7256   -27.4308   -23.5836   -6.56349   -5.24323   -2.97763
  -41.5248   -32.8146   -28.7271   -9.47133   -7.82643   -5.18364
  -48.3567   -38.5488   -33.9685   -12.4284   -10.4731   -7.27508
  -53.1057   -43.7604   -39.2120   -15.4190   -13.3191   -9.61489
  -13.5730   -8.06977   -5.65113   0.961240    1.28074    2.07815
  -19.9323   -13.8110   -11.1247  -0.845649  -0.153701    1.08949
  -27.8491   -21.2544   -17.9120   -3.80599   -2.73287  -0.935069
  -35.7010   -26.9999   -23.3852   -6.54337   -5.17430   -2.79564
  -42.0137   -33.2763   -28.9387   -9.56016   -7.94808   -5.28503
  -48.1776   -38.6688   -34.2429   -12.4221   -10.5889   -7.49872
  -53.3845   -43.4238   -38.8102   -15.4392   -13.3112   -9.64337
  -13.7148   -8.13537   -5.76289   0.942782    1.31659    2.10458
  -20.0305   -13.8955   -11.2698  -0.883212  -0.167646    1.09742
  -28.7399   -21.3432   -17.9444   -3.73398   -2.64461  -0.831958
  -35.5990   -27.5360   -23.7986   -6.53961   -5.24328   -2.91002
  -41.5429   -33.1365   -29.0950   -9.57621   -7.89732   -5.06549
  -47.6170   -38.7865   -34.2940   -12.4050   -10.5413   -7.66705
  -52.6490   -43.5822   -39.1847   -15.4374   -13.3723   -9.78678
  -13.6941   -7.95984   -5.77783   0.915282    1.26135    1.99610
  -19.7027   -14.0046   -11.1591  -0.780447 -0.0928893    1.11080
  -28.4947   -21.1097   -17.7935   -3.81918   -2.70075  -0.873863
  -35.6557   -27.7697   -23.7318   -6.63360   -5.33197   -2.78694
  -41.6673   -33.2961   -28.9835   -9.62471   -7.94218   -5.23322
  -48.2618   -38.7593   -34.2899   -12.5897   -10.6462   -7.41154
  -54.1172   -43.8623   -39.2615   -15.6161   -13.3251   -9.92963
  -13.3203   -7.90074   -5.68767   0.931179    1.29862    1.98081
  -19.8270   -13.7251   -11.0755  -0.862642  -0.164026    1.08285
  -28.9388   -21.2162   -17.9117   -3.66203   -2.57101  -0.785605
  -36.1372   -27.7289   -24.1184   -6.77661   -5.39872   -3.08756
  -41.7662   -33.3775   -29.2523   -9.59716   -7.88770   -5.18416
  -48.5009   -39.1753   -34.7293   -12.5981   -10.6578   -7.71254
  -54.7452   -44.7431   -40.1475   -15.8332   -13.5980   -10.1034 ;
  i = round(nobs/50) + 1 ;
  if ((nobs % 50) == 0) ;
       i = i - 1 ;
  endif ;
  if (i > 10) ;
      i = 10 ;
  endif ;
  if (p > 5) ;
     retp((0~0~0~0~0~0)');
  endif ;
  i = (i-1)*7 + p + 2 ;
retp(za[i,.]');
endp ;
/*
** ZTCRIT
**
** Purpose:    Returns critical values for the Zt statistic, depending on the
**             value of p and the number of observations.
**             Computed using 10000 iterations.
**
** Format:     c-values = zacrit(nobs,p);
**
** Input:      nobs  -- number of observations in the series.
**
**             p     -- order of the time-polynomial in the null hypothesis
**
*/
proc ztcrit(nobs,p) ;
     local zt, i ;
     let zt[70,6] =
  -2.63467   -1.95254   -1.62044   0.910216    1.30508    2.08088
  -3.63993   -2.94935   -2.61560  -0.369306 -0.0116304   0.666745
  -4.20045   -3.54490   -3.21450   -1.20773  -0.896215  -0.237604
  -4.65813   -3.99463   -3.66223   -1.69214   -1.39031  -0.819931
  -5.07175   -4.39197   -4.03090   -2.06503   -1.78329   -1.21830
  -5.45384   -4.73277   -4.39304   -2.40333   -2.15433   -1.62357
  -5.82090   -5.13053   -4.73415   -2.66466   -2.39868   -1.88193
  -2.53279   -1.94976   -1.62656   0.915249    1.31679    2.11787
  -3.56634   -2.93701   -2.61518  -0.439283 -0.0498821   0.694244
  -4.08920   -3.46145   -3.17093   -1.25839  -0.919533  -0.298641
  -4.56873   -3.89966   -3.59161   -1.72543   -1.44513  -0.894085
  -4.97062   -4.33552   -4.00795   -2.12519   -1.85785   -1.30566
  -5.26901   -4.62509   -4.29928   -2.42113   -2.15002   -1.65832
  -5.54856   -4.95553   -4.63476   -2.71763   -2.46508   -1.99450
  -2.60249   -1.94232   -1.59497   0.912961    1.30709    2.02375
  -3.43911   -2.91515   -2.58414  -0.404598 -0.0481033   0.538450
  -4.00519   -3.46110   -3.15517   -1.25332  -0.958071  -0.320677
  -4.46919   -3.87624   -3.58887   -1.70354   -1.44034  -0.920625
  -4.84725   -4.25239   -3.95439   -2.11382   -1.85495   -1.26406
  -5.15555   -4.59557   -4.30149   -2.41271   -2.19370   -1.70447
  -5.46544   -4.89343   -4.58188   -2.74151   -2.49723   -2.02390
  -2.58559   -1.94477   -1.62458   0.905676    1.30371    2.01881
  -3.46419   -2.91242   -2.58837  -0.410558 -0.0141618   0.665034
  -4.00090   -3.45423   -3.16252   -1.24040  -0.937658  -0.304433
  -4.45303   -3.89216   -3.61209   -1.74246   -1.48280  -0.906047
  -4.79484   -4.22115   -3.92941   -2.11434   -1.83632   -1.30274
  -5.15005   -4.58359   -4.30336   -2.44972   -2.21312   -1.68330
  -5.42757   -4.88604   -4.60358   -2.74044   -2.50205   -2.04008
  -2.65229   -1.99090   -1.66577   0.875165    1.27068    2.04414
  -3.49260   -2.87595   -2.56885  -0.416310 -0.0488941   0.611200
  -3.99417   -3.42290   -3.13981   -1.25096  -0.950916  -0.310521
  -4.42462   -3.85645   -3.56568   -1.73108   -1.45873  -0.934604
  -4.72243   -4.22262   -3.94435   -2.10660   -1.84233   -1.26702
  -5.12654   -4.55072   -4.24765   -2.43456   -2.18887   -1.73081
  -5.46995   -4.87930   -4.57608   -2.71226   -2.48367   -2.00597
  -2.63492   -1.96775   -1.62969   0.904516    1.31371    2.03286
  -3.44558   -2.84182   -2.57313  -0.469204  -0.128358   0.553411
  -3.99140   -3.41543   -3.13588   -1.23585  -0.944500  -0.311271
  -4.43404   -3.84922   -3.56413   -1.73854   -1.48585  -0.896978
  -4.75946   -4.19562   -3.91052   -2.09997   -1.86034   -1.32987
  -5.14042   -4.56772   -4.25699   -2.43882   -2.18922   -1.67371
  -5.39389   -4.85343   -4.57927   -2.73497   -2.49921   -2.00247
  -2.58970   -1.95674   -1.61786   0.902516    1.32215    2.05383
  -3.44036   -2.86974   -2.58294  -0.451590 -0.0789340   0.631864
  -3.95420   -3.43052   -3.13924   -1.23328  -0.938986  -0.375491
  -4.40180   -3.79982   -3.52726   -1.71598   -1.44584  -0.885303
  -4.77897   -4.21672   -3.93324   -2.12309   -1.88431   -1.33916
  -5.13508   -4.56464   -4.27617   -2.44358   -2.18826   -1.72784
  -5.35071   -4.82097   -4.54914   -2.73377   -2.48874   -2.01437
  -2.60653   -1.96391   -1.63477   0.890881    1.29296    1.97163
  -3.42692   -2.86280   -2.57220  -0.463397 -0.0922419   0.613101
  -3.99299   -3.41999   -3.13524   -1.23857  -0.929915  -0.337193
  -4.41297   -3.83582   -3.55450   -1.72408   -1.44915  -0.872755
  -4.75811   -4.18759   -3.92599   -2.12799   -1.88463   -1.37118
  -5.08726   -4.53617   -4.26643   -2.44694   -2.19109   -1.72329
  -5.33780   -4.82542   -4.54802   -2.73460   -2.50726   -2.02927
  -2.58687   -1.93939   -1.63192   0.871242    1.26611    1.96641
  -3.38577   -2.86443   -2.57318  -0.391939 -0.0498984   0.659539
  -3.93785   -3.39130   -3.10317   -1.24836  -0.956349  -0.334478
  -4.39967   -3.85724   -3.55951   -1.74578   -1.46374  -0.870275
  -4.74764   -4.20488   -3.91350   -2.12384   -1.88202   -1.36853
  -5.07739   -4.52487   -4.25185   -2.43674   -2.22289   -1.72955
  -5.36172   -4.81947   -4.53837   -2.74448   -2.51367   -2.03065
  -2.58364   -1.95730   -1.63110   0.903082    1.28613    2.00605
  -3.45830   -2.87104   -2.59369  -0.451613  -0.106025   0.536687
  -3.99783   -3.43182   -3.16171   -1.26032  -0.956327  -0.305719
  -4.40298   -3.86066   -3.56940   -1.74588   -1.48429  -0.914111
  -4.84459   -4.23012   -3.93845   -2.15135   -1.89876   -1.39654
  -5.10571   -4.56846   -4.28913   -2.47637   -2.22517   -1.79586
  -5.39872   -4.86396   -4.58525   -2.78971   -2.56181   -2.14042 ;
  i = round(nobs/50) + 1 ;
  if ((nobs % 50) == 0) ;
        i = i - 1 ;
  endif ;
  if (i > 10) ;
      i = 10 ;
  endif ;
  if (p > 5) ;
     retp((0~0~0~0~0~0)');
  endif ;
  i = (i-1)*7 + p + 2 ;
retp(zt[i,.]');
endp ;
/*
** RZACRIT
**
** Purpose:    Returns critical values for the Za statistic when applied
**             to the residuals of a cointegrating regression.
**
** Format:     c-values = rzacrit(nobs,n,p);
**
** Input:      nobs  -- number of observations in the series;
**
**             n     -- column dimension of x;
**
**             p     -- order of the time-polynomial in the null hypothesis;
**
*/
proc rzacrit(nobs,n,p) ;
     local za, i ;
     if ( nobs >= 500) ;
     let za[35,6] =
  -21.4671   -15.0795   -12.3580  -0.435276   0.324484    1.51227
  -27.9595   -20.4517   -16.9301   -2.62646   -1.63417   0.328466
  -35.7997   -27.1717   -23.1708   -5.64344   -4.17317   -1.95892
  -40.6091   -32.6137   -28.6745   -8.68983   -7.05323   -4.01058
  -49.1926   -38.7258   -33.9488   -12.1318   -10.0250   -7.03577
  -54.7842   -44.3203   -38.9217   -14.7787   -12.6858   -9.06660
  -59.6346   -49.3182   -44.3012   -18.0219   -15.8437   -11.8544
  -30.8611   -22.2662   -18.5434   -2.75493   -1.53339   0.290811
  -34.4670   -26.3162   -22.4539   -4.87997   -3.53360   -1.05847
  -41.7400   -32.5797   -28.2930   -8.01653   -6.35131   -3.79932
  -47.3619   -38.0365   -33.7480   -11.2945   -9.42460   -6.00906
  -51.6608   -42.5369   -37.9949   -13.9577   -11.9279   -8.53224
  -58.3279   -48.7145   -43.7128   -17.6050   -15.3694   -11.6298
  -61.9607   -52.2508   -47.2635   -20.5955   -17.9255   -13.2582
  -35.4272   -27.3675   -23.4843   -5.48091   -4.02923   -1.71282
  -40.2438   -31.7486   -27.5563   -7.76551   -6.01490   -2.93732
  -48.3839   -37.5071   -32.9760   -10.6540   -8.52163   -5.29440
  -51.1926   -42.6630   -38.1287   -13.8024   -11.3208   -7.72980
  -59.5024   -48.2790   -42.8624   -16.7708   -14.5235   -10.7538
  -63.9559   -52.8664   -47.6602   -20.3440   -17.6215   -13.7144
  -68.3320   -57.8818   -52.5888   -23.6037   -20.5765   -15.6956
  -42.7639   -33.8215   -29.2817   -8.11879   -6.38572   -3.25556
  -46.1569   -36.9237   -32.4094   -10.3443   -8.23562   -4.67877
  -53.8812   -42.7055   -38.2874   -13.5894   -11.1401   -7.60765
  -57.3691   -47.1248   -42.7974   -16.7935   -14.2390   -10.2687
  -64.3988   -52.7165   -47.8007   -20.1284   -17.1775   -12.6742
  -69.5552   -58.1103   -52.1035   -22.9212   -20.0489   -15.3527
  -72.3939   -62.5092   -57.0232   -26.4007   -23.0741   -18.2529
  -47.8957   -38.5540   -33.7328   -10.5934   -8.61088   -5.18374
  -52.0405   -41.9746   -37.4380   -13.0464   -10.9913   -7.53454
  -57.4362   -47.2991   -42.3937   -15.9642   -13.5136   -9.44575
  -63.1737   -52.2942   -46.9920   -19.4716   -16.7991   -12.5433
  -67.1194   -56.5680   -51.5684   -22.9241   -19.7490   -14.6396
  -74.2638   -62.5804   -57.0437   -25.8755   -22.7569   -17.3466
  -79.3928   -67.5730   -61.5408   -28.7524   -25.5851   -19.6149 ;
     endif ;
     if (400 <= nobs AND nobs <= 499) ;
     let za[35,6] =
  -22.9188   -15.7706   -12.5481  -0.548982   0.295732    1.44030
  -26.5556   -20.1830   -16.7501   -2.51911   -1.51532   0.191855
  -35.1197   -27.0749   -23.3370   -5.73510   -4.32904   -2.00656
  -41.9204   -32.6661   -28.5846   -8.81480   -7.09417   -4.59226
  -48.3478   -38.7616   -34.2542   -11.8980   -10.0113   -6.91339
  -52.5567   -43.1768   -38.5840   -15.0685   -12.8212   -9.13563
  -59.3727   -49.0396   -43.5940   -18.0432   -15.6361   -11.9467
  -29.9396   -21.9595   -18.3809   -2.80158   -1.64630   0.268450
  -34.7599   -26.1676   -22.3849   -4.93364   -3.56940   -1.18088
  -40.7391   -32.3049   -27.9239   -8.00588   -6.35648   -3.38963
  -47.1627   -37.3766   -32.7183   -11.0926   -9.24142   -6.07810
  -53.3108   -42.5974   -38.0402   -14.2525   -11.9578   -8.69189
  -57.6851   -47.7086   -42.9647   -17.4996   -15.0510   -11.3467
  -64.4858   -53.4701   -48.1205   -20.7640   -18.2233   -14.1156
  -35.8116   -27.8176   -23.6242   -5.39838   -3.84329   -1.43964
  -40.7124   -32.0367   -27.4329   -7.50289   -5.75255   -2.80733
  -45.9483   -37.0641   -32.6862   -10.6394   -8.67768   -5.65788
  -52.4024   -42.5639   -37.5381   -13.8722   -11.5935   -7.90296
  -57.6021   -47.2047   -42.4496   -16.9887   -14.4577   -10.2998
  -63.6043   -52.4479   -47.5632   -20.0267   -17.4605   -13.3088
  -69.6351   -57.9399   -52.3485   -23.6686   -20.6098   -15.7879
  -42.2399   -33.3270   -28.9168   -7.94534   -6.18320   -3.43527
  -45.7984   -36.7277   -32.5747   -10.3819   -8.45957   -5.14917
  -52.4921   -42.1115   -37.5244   -13.1878   -10.9327   -7.39370
  -57.5111   -47.2835   -42.0975   -16.4866   -14.0874   -10.4252
  -62.7764   -52.1772   -47.0647   -19.7580   -16.8928   -12.2112
  -67.9295   -57.0921   -51.9770   -22.7899   -19.7349   -14.8885
  -74.2355   -62.1294   -56.5681   -26.0945   -23.0594   -18.0395
  -47.7363   -38.1529   -33.8043   -10.7799   -8.63516   -5.40391
  -52.2272   -42.1237   -37.6132   -13.1234   -10.8396   -7.09656
  -57.2914   -47.2188   -42.3110   -15.9548   -13.4671   -9.60197
  -62.9673   -51.7677   -46.7206   -19.2817   -16.4915   -11.8612
  -68.6468   -56.9128   -51.5857   -22.3228   -19.3883   -14.6231
  -72.8272   -61.3012   -56.0305   -25.8526   -22.7498   -17.3500
  -77.6934   -66.0426   -60.5481   -28.9536   -25.6333   -20.0079 ;
     endif ;
     if (300 <= nobs AND nobs <= 399) ;
     let za[35,6] =
  -22.3813   -15.4849   -12.4695  -0.558307   0.220102    1.44370
  -27.3153   -19.5886   -16.6016   -2.58717   -1.49135   0.206122
  -33.6704   -26.4351   -22.8739   -5.64339   -4.25768   -1.75347
  -41.7185   -32.9010   -28.6665   -8.86133   -7.18926   -4.50427
  -46.7902   -37.6643   -33.3826   -11.8385   -9.81420   -6.88612
  -52.5711   -42.7425   -38.4843   -15.0233   -12.7709   -9.50042
  -58.4246   -48.0222   -43.0556   -18.2012   -15.9371   -12.1535
  -30.0280   -21.7066   -18.1450   -2.88607   -1.71198   0.206875
  -33.6676   -25.9025   -22.1912   -5.01970   -3.55164   -1.08931
  -39.7084   -31.6813   -27.4115   -7.98883   -6.32809   -3.63162
  -46.6211   -37.3207   -32.7405   -11.1691   -9.28148   -5.84923
  -52.1981   -42.7974   -38.0418   -14.3243   -12.1524   -8.71617
  -57.0630   -47.6883   -42.9236   -17.2568   -15.1022   -11.2844
  -62.0737   -52.0128   -47.1553   -20.7157   -18.1197   -14.0741
  -35.6430   -27.8195   -23.6376   -5.34868   -3.91291   -1.50448
  -39.3950   -31.0996   -27.0114   -7.35931   -5.70470   -3.11172
  -46.0777   -36.6083   -32.3602   -10.6057   -8.59238   -5.36354
  -51.8316   -41.8956   -37.5345   -13.6185   -11.2834   -7.84730
  -56.0726   -47.0288   -41.8627   -16.8830   -14.4927   -10.5780
  -62.2422   -52.5135   -47.1509   -20.0698   -17.4055   -12.9041
  -67.4764   -56.5852   -51.4893   -23.1426   -20.2123   -16.0285
  -42.0547   -32.6722   -28.7365   -8.25705   -6.47099   -3.59175
  -45.6434   -36.5854   -32.2959   -10.0966   -8.04826   -4.95148
  -51.9478   -42.0463   -37.1118   -13.2242   -11.1226   -7.31930
  -55.6784   -46.7367   -42.0064   -16.7259   -14.0613   -9.97399
  -62.8400   -51.3055   -46.2511   -19.6925   -17.1439   -12.7338
  -67.4053   -57.0160   -51.4235   -22.7240   -19.9559   -15.4086
  -71.7723   -60.8535   -55.9025   -26.1189   -23.1170   -17.9214
  -47.6549   -37.6107   -33.1369   -10.5726   -8.54998   -5.29034
  -51.6149   -41.1989   -36.7877   -13.1170   -10.8796   -7.21117
  -56.1660   -46.2705   -41.8297   -16.0622   -13.7372   -9.49393
  -61.1654   -51.1310   -46.0271   -19.1949   -16.5928   -12.0905
  -67.6881   -56.6089   -51.3427   -22.1847   -19.1941   -14.5979
  -71.2216   -61.0072   -55.6162   -25.6297   -22.5415   -17.0044
  -77.4278   -65.2785   -59.6897   -28.8819   -25.3894   -20.0220 ;
     endif ;
     if (200 <= nobs AND nobs <= 299) ;
     let za[35,6] =
  -21.8958   -15.3156   -12.3940  -0.460927   0.308737    1.59442
  -26.9142   -20.0911   -16.7770   -2.57728   -1.53959   0.182089
  -34.5565   -26.2075   -22.5065   -5.63221   -4.25839   -2.09905
  -40.5353   -31.8194   -27.8596   -8.70659   -7.20628   -4.56393
  -46.2889   -37.2800   -33.0457   -11.8831   -10.0522   -7.17753
  -51.0380   -42.1892   -37.7579   -15.0233   -12.8062   -9.56488
  -56.6046   -47.2833   -42.6456   -17.9651   -15.5299   -12.0996
  -29.1299   -21.6087   -17.9928   -2.71444   -1.59606   0.247672
  -33.0966   -25.0864   -21.4664   -4.87778   -3.46074   -1.34083
  -39.4106   -31.4881   -27.3006   -7.85463   -6.10205   -3.52620
  -44.0881   -36.4696   -32.1768   -11.2012   -9.26279   -6.14464
  -50.9749   -42.0841   -37.4623   -14.2505   -11.9797   -8.41220
  -56.6213   -46.8568   -41.9155   -17.3003   -14.9001   -11.2532
  -60.7782   -51.7033   -46.8274   -20.7101   -18.2872   -14.2641
  -35.3726   -27.1370   -23.5479   -5.17746   -3.76943   -1.54159
  -38.5206   -31.0636   -27.0320   -7.47761   -5.93558   -3.16288
  -44.1830   -35.7245   -31.5933   -10.4191   -8.36834   -5.48113
  -50.9516   -41.2693   -36.8226   -13.5556   -11.3181   -7.94382
  -55.4022   -46.4845   -41.5196   -16.7634   -14.4060   -10.3775
  -59.4185   -50.2354   -45.4775   -20.1223   -17.4021   -13.1738
  -64.6564   -55.2458   -50.4576   -23.0454   -20.3176   -16.1552
  -41.1245   -31.7777   -27.7403   -7.84447   -6.08328   -3.23009
  -44.6757   -35.4056   -31.3301   -10.0983   -8.13089   -4.92899
  -50.0936   -40.7371   -36.0824   -13.0535   -10.7963   -7.07195
  -54.8735   -45.2926   -40.8791   -16.2755   -13.9003   -9.84370
  -60.4991   -50.6938   -45.7933   -19.4433   -16.6683   -12.3619
  -65.3403   -54.9457   -49.7471   -22.6047   -19.6847   -15.2332
  -69.8916   -59.2533   -54.3292   -25.9054   -22.8285   -17.8937
  -45.8851   -37.1075   -32.4673   -10.6064   -8.63559   -5.39008
  -49.3034   -40.9522   -36.4291   -12.9953   -10.7125   -7.27099
  -54.2729   -44.8254   -40.4288   -15.8843   -13.4477   -9.36261
  -60.5904   -50.0341   -45.1484   -18.8993   -15.9432   -11.8036
  -64.4973   -53.9015   -49.2666   -21.9170   -19.1606   -14.3631
  -69.5759   -59.1348   -53.9680   -25.2096   -22.1752   -16.9723
  -72.9500   -63.2358   -58.1154   -28.3927   -25.1513   -20.0862 ;
     endif ;
     if (1 <= nobs  AND nobs <= 199) ;
     let za[35,6] =
  -21.1622   -15.0960   -12.1119  -0.531024   0.237703    1.51185
  -25.7667   -19.1914   -16.1871   -2.56324   -1.48699   0.202784
  -32.4541   -25.5105   -22.0564   -5.71305   -4.39615   -2.01602
  -38.1867   -30.5617   -26.8962   -8.74071   -7.17802   -4.59726
  -42.7783   -35.0825   -31.3305   -11.6276   -9.97679   -7.15538
  -47.8564   -39.8545   -35.8211   -14.7628   -12.7039   -9.71258
  -52.6929   -43.8877   -39.9161   -17.7151   -15.6462   -12.0907
  -28.0512   -20.9592   -17.6168   -2.79465   -1.66553   0.192170
  -32.0404   -24.5234   -21.1884   -4.95833   -3.53934   -1.36311
  -37.6801   -29.6520   -25.9967   -7.75249   -6.21251   -3.70119
  -42.2809   -34.5729   -30.7997   -10.9493   -9.11650   -6.16531
  -47.4805   -39.1569   -35.3499   -14.0989   -11.9176   -8.61557
  -50.8097   -43.4659   -39.1938   -17.0348   -14.7945   -11.2642
  -55.8249   -47.5401   -43.3989   -20.0631   -17.7007   -13.6704
  -33.9682   -26.0637   -22.7309   -5.34150   -3.87345   -1.45270
  -36.7304   -29.3862   -25.8572   -7.34775   -5.66992   -3.00252
  -41.1666   -33.7144   -29.9410   -10.4175   -8.45280   -5.42007
  -46.9132   -38.5770   -34.7333   -13.3011   -11.2427   -7.73518
  -51.4276   -42.8703   -38.8937   -16.5806   -14.1789   -10.4599
  -55.3363   -46.9459   -43.0831   -19.5354   -17.1105   -13.1934
  -58.9798   -50.5660   -46.8111   -22.6238   -19.9968   -15.8417
  -38.0643   -30.4296   -26.7042   -7.69110   -6.10305   -3.27424
  -41.6270   -33.7741   -29.8894   -9.96723   -8.04336   -4.91871
  -45.5533   -37.9883   -33.9732   -12.6388   -10.6505   -7.32420
  -50.6468   -42.6005   -38.2657   -15.8131   -13.5049   -9.89502
  -55.8297   -47.1233   -42.4050   -18.9454   -16.3686   -12.4481
  -58.2503   -49.9445   -46.0380   -21.7503   -18.9898   -15.1075
  -62.8495   -54.0570   -49.6752   -24.8507   -22.1536   -17.4463
  -43.6443   -34.8656   -31.0302   -10.3822   -8.24301   -5.19462
  -45.8218   -37.6995   -33.8551   -12.4798   -10.5675   -7.00729
  -50.4771   -42.2573   -38.3627   -15.3475   -13.0714   -9.32388
  -54.5879   -46.0684   -42.3553   -18.1529   -15.5466   -11.9274
  -57.8477   -49.6939   -45.5737   -21.3019   -18.8483   -14.4373
  -63.0028   -53.8536   -49.3811   -24.0931   -21.1612   -16.6768
  -65.1981   -57.3151   -53.1312   -27.2301   -24.3744   -20.1525 ;
     endif ;
     if ((n < 1) OR (n > 5)) ;
           retp((0~0~0~0~0~0~0)');
     endif ;
     if (p > 5) ;
        retp((0~0~0~0~0~0~0)');
     endif ;
     n = (n-1)*7 + p + 2 ;
retp(za[n,.]');
endp ;
/*
** RZTCRIT
**
** Purpose:    Returns critical values for the Zt statistic when applied
**             to the residuals of a cointegrating regression.
**
** Format:     c-values = rztcrit(nobs,n,p);
**
** Input:      nobs  -- number of observations in the series.
**
**             n     -- column dimension of x;
**
**             p     -- order of the time-polynomial in the null hypothesis
**
*/
proc rztcrit(nobs,n,p) ;
     local zt, i ;
     if ( nobs >= 500) ;
     let zt[35,6] =
  -3.28608   -2.71123   -2.44427  -0.228267   0.196845    1.07845
  -3.88031   -3.35851   -3.03798   -1.01144  -0.653342   0.153117
  -4.36339   -3.84931   -3.52926   -1.59069   -1.27691  -0.688550
  -4.69226   -4.16473   -3.91069   -2.03499   -1.75167   -1.16909
  -5.12583   -4.55603   -4.24350   -2.43062   -2.15918   -1.63241
  -5.45902   -4.85433   -4.54552   -2.68999   -2.45059   -1.96213
  -5.68874   -5.13084   -4.85451   -3.01287   -2.77470   -2.34774
  -3.95399   -3.33181   -3.01057  -0.964258  -0.632140   0.148153
  -4.29147   -3.77581   -3.47606   -1.47435   -1.15649  -0.382089
  -4.80216   -4.16163   -3.87422   -1.95661   -1.68975   -1.17624
  -5.08973   -4.49148   -4.22534   -2.34763   -2.09506   -1.52368
  -5.28946   -4.77944   -4.49057   -2.63483   -2.39227   -1.88262
  -5.64107   -5.10086   -4.81771   -2.95313   -2.74233   -2.30293
  -5.84555   -5.26853   -5.01340   -3.21419   -2.95790   -2.50159
  -4.25439   -3.69759   -3.42840   -1.49852   -1.22694  -0.593763
  -4.62332   -4.12603   -3.83833   -1.91632   -1.65271  -0.937750
  -5.09990   -4.50073   -4.18896   -2.26553   -1.97459   -1.41616
  -5.23982   -4.74879   -4.50065   -2.59004   -2.30601   -1.76624
  -5.63745   -5.07700   -4.77794   -2.88029   -2.66305   -2.25529
  -5.87733   -5.31763   -5.03729   -3.17526   -2.94043   -2.54329
  -6.08463   -5.57014   -5.29279   -3.45890   -3.21035   -2.68331
  -4.68825   -4.14264   -3.83668   -1.89022   -1.62543   -1.02171
  -5.00664   -4.43544   -4.14709   -2.24334   -1.94304   -1.29258
  -5.42102   -4.77343   -4.48998   -2.57209   -2.30366   -1.79885
  -5.60249   -5.02686   -4.77574   -2.89195   -2.61726   -2.09253
  -5.90744   -5.31272   -5.04121   -3.16076   -2.89667   -2.44274
  -6.16639   -5.58218   -5.28049   -3.40263   -3.15765   -2.70251
  -6.29638   -5.79252   -5.52324   -3.65372   -3.40115   -2.94514
  -4.99327   -4.43088   -4.13314   -2.19577   -1.94806   -1.33955
  -5.28724   -4.72773   -4.46224   -2.52556   -2.25121   -1.75592
  -5.53603   -5.03231   -4.74442   -2.81101   -2.53978   -2.01464
  -5.85790   -5.28516   -4.99765   -3.11650   -2.85684   -2.38643
  -6.03218   -5.50167   -5.24244   -3.37898   -3.13182   -2.57977
  -6.38137   -5.80056   -5.52693   -3.62856   -3.37482   -2.85511
  -6.60394   -6.03056   -5.73651   -3.83174   -3.56048   -3.09560 ;
     endif ;
     if (400 <= nobs AND nobs <= 499) ;
     let zt[35,6] =
  -3.39320   -2.78062   -2.47410  -0.279165   0.172570    1.01757
  -3.81898   -3.34274   -3.04197  -0.984635  -0.632195  0.0786160
  -4.43824   -3.83476   -3.53856   -1.59769   -1.32538  -0.682733
  -4.78731   -4.19879   -3.90468   -2.03620   -1.78519   -1.25540
  -5.15859   -4.55815   -4.27559   -2.40402   -2.15148   -1.64991
  -5.36666   -4.82211   -4.55480   -2.73039   -2.47586   -1.96342
  -5.70533   -5.14149   -4.83768   -2.98968   -2.75467   -2.33244
  -3.88099   -3.31554   -3.00918   -1.01400  -0.666507   0.112207
  -4.35920   -3.76677   -3.47891   -1.47887   -1.17461  -0.457611
  -4.73655   -4.17175   -3.87843   -1.95622   -1.67273   -1.05752
  -5.03407   -4.48465   -4.18736   -2.32047   -2.06844   -1.54620
  -5.37301   -4.80609   -4.50790   -2.65816   -2.39100   -1.90516
  -5.63842   -5.08273   -4.79419   -2.95211   -2.72047   -2.26114
  -5.95823   -5.38482   -5.08735   -3.23862   -2.98661   -2.58060
  -4.29209   -3.74752   -3.44785   -1.49664   -1.19363  -0.540536
  -4.73620   -4.16373   -3.83159   -1.87826   -1.56786  -0.906299
  -4.98331   -4.47817   -4.18238   -2.27544   -1.99733   -1.45956
  -5.34322   -4.77455   -4.47877   -2.60581   -2.34669   -1.82075
  -5.61331   -5.05800   -4.77543   -2.91228   -2.64829   -2.13015
  -5.94606   -5.34094   -5.05669   -3.17314   -2.92833   -2.50131
  -6.17994   -5.62560   -5.32022   -3.45919   -3.21928   -2.73838
  -4.68326   -4.13893   -3.83504   -1.88594   -1.59783   -1.02900
  -5.01959   -4.44111   -4.16075   -2.24225   -1.96550   -1.36753
  -5.35312   -4.76318   -4.48253   -2.53350   -2.26862   -1.74966
  -5.65846   -5.05443   -4.74318   -2.86021   -2.61633   -2.15096
  -5.89297   -5.33097   -5.03686   -3.13780   -2.88399   -2.36895
  -6.11791   -5.59035   -5.29834   -3.39283   -3.13194   -2.64558
  -6.43463   -5.83831   -5.54375   -3.63526   -3.40822   -2.97731
  -4.99049   -4.45174   -4.15603   -2.22388   -1.94107   -1.40933
  -5.37057   -4.77929   -4.48921   -2.54431   -2.27297   -1.72675
  -5.61805   -5.06136   -4.76461   -2.81651   -2.54785   -2.04956
  -5.88425   -5.29788   -5.01558   -3.10698   -2.83781   -2.33035
  -6.15156   -5.57259   -5.28198   -3.36062   -3.10140   -2.61065
  -6.37314   -5.80031   -5.51577   -3.63686   -3.38505   -2.87176
  -6.58251   -6.03057   -5.74573   -3.85037   -3.60485   -3.11932  ;
     endif ;
     if (300 <= nobs AND nobs <= 399) ;
     let zt[35,6] =
  -3.36203   -2.77548   -2.46139  -0.286807   0.132866    1.03471
  -3.90239   -3.32711   -3.03723  -0.996528  -0.605509   0.118508
  -4.32982   -3.81156   -3.51879   -1.59453   -1.29025  -0.576746
  -4.81264   -4.24058   -3.93314   -2.05226   -1.79734   -1.23867
  -5.09929   -4.53317   -4.26022   -2.39047   -2.15062   -1.66121
  -5.40020   -4.84728   -4.56541   -2.72073   -2.48276   -2.01238
  -5.72554   -5.14543   -4.85290   -3.03642   -2.79747   -2.38877
  -3.93064   -3.31039   -3.00695   -1.02551  -0.692057   0.104883
  -4.30844   -3.76971   -3.48291   -1.49867   -1.18293  -0.449296
  -4.69802   -4.16002   -3.85937   -1.95172   -1.66941   -1.07873
  -5.09621   -4.51913   -4.22178   -2.32005   -2.06940   -1.52440
  -5.39988   -4.84499   -4.54918   -2.66241   -2.40886   -1.94518
  -5.67194   -5.12143   -4.83266   -2.95787   -2.71575   -2.26783
  -5.90971   -5.38093   -5.10006   -3.24590   -3.00999   -2.55590
  -4.32518   -3.77645   -3.46220   -1.48724   -1.19931  -0.531819
  -4.66166   -4.12423   -3.82665   -1.85992   -1.56770  -0.952556
  -5.06263   -4.47715   -4.19478   -2.27228   -1.98935   -1.40857
  -5.39577   -4.79037   -4.51644   -2.60186   -2.32067   -1.82448
  -5.62591   -5.09997   -4.78451   -2.89543   -2.66108   -2.16281
  -5.96117   -5.38487   -5.08529   -3.19176   -2.95677   -2.45750
  -6.18044   -5.61962   -5.32402   -3.44453   -3.18600   -2.75024
  -4.69949   -4.11581   -3.84809   -1.91652   -1.63097   -1.06354
  -5.02878   -4.48050   -4.18169   -2.20023   -1.92196   -1.37122
  -5.37891   -4.82102   -4.49501   -2.55100   -2.29407   -1.76313
  -5.59926   -5.07560   -4.78056   -2.89047   -2.61834   -2.11372
  -5.97404   -5.35040   -5.03148   -3.15838   -2.91666   -2.44570
  -6.20250   -5.64756   -5.33112   -3.40255   -3.16800   -2.73795
  -6.40258   -5.84695   -5.58164   -3.67811   -3.42766   -2.97315
  -5.02873   -4.44103   -4.15164   -2.19792   -1.94100   -1.39467
  -5.36834   -4.76996   -4.46992   -2.53666   -2.27257   -1.73355
  -5.59537   -5.05016   -4.78520   -2.83093   -2.57279   -2.07503
  -5.85590   -5.33224   -5.03207   -3.11489   -2.86007   -2.36551
  -6.20771   -5.62475   -5.32273   -3.36439   -3.10806   -2.63899
  -6.38397   -5.87287   -5.56819   -3.63376   -3.37917   -2.87215
  -6.69353   -6.08474   -5.78590   -3.87231   -3.61022   -3.14908 ;
     endif ;
     if (200 <= nobs AND nobs <= 299) ;
     let zt[35,6] =
  -3.35671   -2.77519   -2.46594  -0.254099   0.196134    1.07222
  -3.92428   -3.38037   -3.08215   -1.00759  -0.634217  0.0945623
  -4.48168   -3.83395   -3.54540   -1.60205   -1.31840  -0.734322
  -4.82954   -4.23468   -3.94803   -2.05472   -1.80434   -1.27245
  -5.19748   -4.57984   -4.28594   -2.42219   -2.18483   -1.73071
  -5.48348   -4.89872   -4.60436   -2.75423   -2.51959   -2.06231
  -5.82241   -5.21284   -4.90675   -3.03145   -2.79112   -2.38818
  -3.88242   -3.33232   -3.01999  -0.988265  -0.633419   0.121320
  -4.36630   -3.76414   -3.46091   -1.48625   -1.15077  -0.498422
  -4.76842   -4.20038   -3.89975   -1.93433   -1.63407   -1.04290
  -5.05007   -4.54203   -4.23534   -2.35721   -2.10330   -1.57965
  -5.46384   -4.89647   -4.60567   -2.66674   -2.41227   -1.92884
  -5.80068   -5.17731   -4.86360   -2.97354   -2.71548   -2.25152
  -6.01552   -5.48792   -5.18651   -3.27732   -3.05193   -2.62313
  -4.37038   -3.77348   -3.48123   -1.46468   -1.19712  -0.522913
  -4.71164   -4.17296   -3.87214   -1.88824   -1.61792  -0.998973
  -5.07287   -4.49791   -4.19539   -2.25537   -1.97775   -1.42073
  -5.43158   -4.85660   -4.55542   -2.59513   -2.34448   -1.88253
  -5.71928   -5.15509   -4.85008   -2.91869   -2.67892   -2.16537
  -5.95901   -5.38920   -5.10190   -3.21921   -2.97088   -2.49105
  -6.24842   -5.69150   -5.39236   -3.47876   -3.22814   -2.81954
  -4.76132   -4.12120   -3.81887   -1.87640   -1.57988  -0.959247
  -5.07595   -4.49599   -4.18062   -2.22181   -1.95429   -1.32816
  -5.41865   -4.82420   -4.51442   -2.54584   -2.28898   -1.71129
  -5.69988   -5.10837   -4.81872   -2.87861   -2.62537   -2.10745
  -6.03815   -5.41121   -5.11067   -3.15726   -2.89572   -2.39236
  -6.31746   -5.67322   -5.35729   -3.42445   -3.18255   -2.72287
  -6.54722   -5.92036   -5.63475   -3.68619   -3.44087   -2.99590
  -5.06954   -4.48980   -4.16461   -2.22770   -1.95682   -1.39685
  -5.35737   -4.81634   -4.52940   -2.54416   -2.26355   -1.73669
  -5.65024   -5.06222   -4.78444   -2.84019   -2.55801   -2.03438
  -6.01717   -5.38593   -5.07183   -3.10854   -2.83015   -2.38316
  -6.22810   -5.62644   -5.32983   -3.37920   -3.11022   -2.58412
  -6.51923   -5.91250   -5.61917   -3.64604   -3.37807   -2.91979
  -6.74433   -6.15641   -5.85483   -3.88559   -3.62884   -3.22791 ;
     endif ;
     if (1 <= nobs  AND nobs <=199) ;
     let zt[35,6] =
  -3.40026   -2.81980   -2.49012  -0.284064   0.162780   0.991182
  -4.02456   -3.40397   -3.08903  -0.998765  -0.638257  0.0929366
  -4.50406   -3.91574   -3.60618   -1.64640   -1.34126  -0.674994
  -4.97750   -4.31424   -4.00116   -2.07039   -1.80758   -1.24622
  -5.29795   -4.65255   -4.36236   -2.43756   -2.20744   -1.74384
  -5.69006   -5.02821   -4.70153   -2.78533   -2.55054   -2.12221
  -6.01114   -5.32900   -5.01614   -3.10458   -2.87108   -2.45944
  -4.03875   -3.38465   -3.06445   -1.01452  -0.670171  0.0830536
  -4.49697   -3.83781   -3.52924   -1.50657   -1.18131  -0.494574
  -4.85358   -4.24290   -3.92668   -1.93268   -1.67668   -1.11969
  -5.23415   -4.63779   -4.32076   -2.35203   -2.10299   -1.58236
  -5.60428   -4.99996   -4.67591   -2.71512   -2.45663   -1.97999
  -5.89816   -5.30839   -4.98307   -3.01998   -2.78403   -2.33971
  -6.24667   -5.61312   -5.28841   -3.32373   -3.07681   -2.65243
  -4.50725   -3.84730   -3.53859   -1.50198   -1.21063  -0.494936
  -4.87844   -4.22489   -3.92431   -1.88702   -1.59187  -0.972172
  -5.20113   -4.56724   -4.27167   -2.29534   -2.03226   -1.43479
  -5.61984   -4.95138   -4.63381   -2.62062   -2.34903   -1.81713
  -5.93516   -5.26326   -4.95702   -2.97158   -2.70668   -2.22094
  -6.20848   -5.57967   -5.28403   -3.27115   -3.01521   -2.58367
  -6.52806   -5.84919   -5.55596   -3.54144   -3.30790   -2.88872
  -4.84291   -4.21809   -3.89360   -1.88296   -1.62337  -0.998749
  -5.18976   -4.56495   -4.23781   -2.23973   -1.95745   -1.36282
  -5.49570   -4.91049   -4.57949   -2.54844   -2.30040   -1.81108
  -5.85200   -5.24753   -4.90738   -2.89515   -2.62635   -2.11513
  -6.25788   -5.59734   -5.23154   -3.20543   -2.95304   -2.49876
  -6.42744   -5.80415   -5.49459   -3.46836   -3.20457   -2.78454
  -6.79276   -6.11558   -5.77461   -3.74987   -3.49703   -3.07378
  -5.25985   -4.56675   -4.25742   -2.24159   -1.93760   -1.40055
  -5.53963   -4.88523   -4.55008   -2.53159   -2.26558   -1.74469
  -5.86277   -5.23537   -4.92559   -2.84160   -2.58154   -2.08171
  -6.16676   -5.52360   -5.22425   -3.12455   -2.84785   -2.41246
  -6.43205   -5.80308   -5.46594   -3.42417   -3.19918   -2.69791
  -6.81177   -6.11377   -5.74083   -3.67826   -3.41996   -2.95145
  -6.98960   -6.36882   -6.03754   -3.95573   -3.71192   -3.30766;
     endif ;
     if ((n < 1) OR (n > 5)) ;
           retp((0~0~0~0~0~0~0)');
     endif ;
     if (p > 5) ;
        retp((0~0~0~0~0~0~0)');
     endif ;
     n = (n-1)*7 + p + 2 ;
retp(zt[n,.]');
endp ;
/*
** JSTAT
**
** Purpose:    Computes the J(p,q) statistic for the null hypothesis
**             that y possesses a unit root around a pth order time
**             trend.
**
** Format:     { jstat, cv } = jstat(y,p,q);
**
** Input:      y     -- time series variable
**
**             p     -- order of the time-polynomial in the null hypothesis
**
**             q     -- order of the time-polynomial to fit in the augmented
**                      regression.
**
** Output:     jstat       --  value of the J-statistic
**
**             cv          --  critical values for the J(p,q) statistic
**                             1% 5% 10% 90% 95% 99%
**
*/
proc (2) = jstat(y,p,q) ;
     local resid, rss0, rss1, js;

     if (p >= q) ;
        "Error: q must be greater than p";
        retp(0,0);
     endif;

     if (p < -1) ;
        "Error: p must be >= -1";
        retp(0,0);
     endif ;

     if (q < 0);
        "Error: q must be >= 0";
        retp(0,0);
     endif ;

     if (cols(y) > 1);
        "Error: JSTAT cannot handle a data matrix; cols(x) > 1 (=" cols(y) ")";
         retp(0,0);
     endif ;

     resid  = detrend(y,p);
     rss0   = resid'resid ;

     resid  = detrend(y,q);
     rss1   = resid'resid ;
     js     = (rss0 - rss1)/rss1;

retp(js,jcrit(p,q)) ;
endp ;
/*
** GSTAT
**
** Purpose: Computes the G(p,q) statistic for the null hypothesis
**          that y is stationary.
**
** Format:  {gstat, p-value} = gstat(y,p,q,v);
**
** Input:   y     -- time series variable
**
**          p     -- order of the time-polynomial in the null hypothesis
**
**          q     -- order of the time-polynomial to fit in the augmented
**                   regression.
**
**          v     -- number of auto-correlation terms to use when computing
**                   the spectrum at frequency zero.
**
** Output:  gstat       --  value of the G-statistic
**
**          p-value     --  p-value of the computed G-statistic
**
*/
proc (2) = gstat(y,p,q,v) ;
     local resid, rss0, rss1, js, omga ;

     if (p >= q) ;
        "Error: q must be greater than p";
        retp(0,0);
     endif;

     if (p < -1) ;
        "Error: p must be >= -1";
        retp(0,0);
     endif ;

     if (q <  0);
        "Error: q must be >= 0";
        retp(0,0);
     endif ;

     if (cols(y) > 1);
        "Error: GSTAT cannot handle a data matrix; cols(x) > 1 (=" cols(y) ")";
         retp(0,0);
     endif ;

     resid  = detrend(y,p) ;
     rss0   = resid'resid  ;
     omga   = lrvar(resid,v) ;

     resid  = detrend(y,q) ;
     rss1   = resid'resid  ;
     js     = (rss0 - rss1)/omga;

retp(js,cdfchic(js,q-p)) ;
endp ;
/*
** ADF
**
** Purpose: Compute the Augmented Dickey Fuller statistic, allowing
**          for deterministic polynomial time trends of an arbitrary
**          order.
**
** Format:  {alpha, tstat, adf_t_crit} = adf(x,p,l);
**
** Input:   x     -- time series variable
**
**          p     -- order of the time-polynomial to include in the
**                   ADF regression.  Set p = -1 for no deterministic
**                   part.
**
**          l     -- number of lagged changes of x to include in the
**                   fitted regression.
**
** Output:  alpha       --  estimate of the autoregressive parmaeter;
**
**          tstat       --  ADF t-statistic
**
**          ztcrit      --  (6 x 1)  vector of critical values for the
**                           adf-t-statistic: 1 5 10 90 95 99%
*/
proc (3) = adf(x,p,l) ;
     local b,k,z,res,so,var_cov,xx;
     local timep,t,m,xmat,nobs,dep,ch,f;
     if (p < -1);
        "Error: p cannot be set < -1";
         retp(0,0,zeros(6,1));
     endif ;
     if (cols(x) > 1);
        "Error: ADF cannot handle a data matrix; cols(x) > 1 (=" cols(x) ")";
         retp(0,0,zeros(6,1));
     endif ;
     nobs    = rows(x);
     if (nobs - (2*l) + 1 < 1) ;
        "Error: l is too large; negative degrees of freedom.";
         retp(0,0,zeros(6,1));
     endif ;
     dep     = trimr(x,1,0);
     ch      = diff(x,1);
     k       = 0     ;
     z	     = trimr(lagn(x,1),1,0) ;
     If (l > 0) ;
        do until k >= l ;
           k = k + 1 ;
	   z = z~lagn(ch,k) ;
        endo ;
     Endif ;
     z       = trimr(z,k,0);
     dep     = trimr(dep,k,0);
     if ( p > -1) ;
        z = z~ptrend(p,rows(z));
     endif ;
     b       = dep/z ;
     res     = dep - z*b ;
     so      = (res'res)/(rows(dep)-cols(z));
     var_cov = so*inv(z'z) ;
retp(b[1,1],(b[1,1]-1)/sqrt(var_cov[1,1]),ztcrit(nobs,p)) ;
endp ;
/*
** CADF
**
** Purpose: Compute the Augmented Dickey Fuller statistic applied to
**          the residuals of a cointegrating regression, allowing for
**          deterministic polynomial time trends of an arbitrary order.
**
** Format:  {alpha, tstat, adf_t_crit} = cadf(y,x,p,l);
**
** Input:   y     -- dependent variable
**          x     -- explanatory variables
**
**          p     -- order of the time-polynomial to include in the
**                   cointegrating regression.  Set p = -1 for no
**                   deterministic part.
**
**          l     -- number of lagged changes of the residuals to include
**                   in the fitted regression.
**
** Output:  alpha       --  estimate of the autoregressive parmaeter;
**
**          tstat       --  ADF t-statistic
**
**          rztcrit      --  (6 x 1)  vector of critical values for the
**                           adf-t-statistic: 1 5 10 90 95 99%
*/
proc (3) = cadf(y,x,p,l) ;
     local beta,dep,k,z,res,so,var_cov,xx,r;
     local timep,t,m,xmat,nobs ;
     if (p < -1);
        "Error: p cannot be < -1";
         retp(0,0,zeros(6,1));
     endif ;
     nobs    = rows(x);
     if (nobs - (2*l) + 1 < 1) ;
        "Error: l is too large; negative degrees of freedom.";
         retp(0,0,zeros(6,1));
     endif ;
     y       = detrend(y,p);
     x       = detrend(x,p);
     r       = y - x*(y/x);
     dep     = diff(r,1);
     k       = 0     ;
     z	     = trimr(lagn(r,1),1,0) ;
     If (l > 0) ;
        do until k >= l ;
           k = k + 1 ;
	   z = z~lagn(dep,k) ;
        endo ;
     EndIf;
     z       = trimr(z,l,0) ;
     dep     = trimr(dep,l,0) ;
     beta    = detrend(dep,0)/detrend(z,0) ;
     res     = dep - z*beta ;
     so      = (res'res)/(rows(dep)-cols(z));
     var_cov = so*inv(z'z) ;
     retp(beta[1,1]+1.0,beta[1,1]/sqrt(var_cov[1,1]),rztcrit(nobs,cols(x),p)) ;
endp ;
/*
** ZA
**
** Purpose: Computes Phillips Za and Zt statistics allowing for deterministic
**          trends of an arbitrary order.
**
** Format:  {alpha, Za, Zt, ZaCrit, ZtCrit} = za(x,p,l);
**
** Input:   x     -- time series
**
**          p     -- order of the time-polynomial to include in the
**                   fitted regression.  Set p = -1 for no deterministic
**                   part.
**
**          l     -- number of auto-correlations to use when computing the
**                   spectrum(@0).
**
**
** Output:  alpha       --  estimate of the autoregressive parameter;
**
**          Za          --  Za statistic
**
**          Zt          --  Zt statistic
**
**          ZaCrit      --  (6 x 1)  vector of critical values for the
**                          a-statistic: 1 5 10 90 95 99%
**
**          ZtCrit      --  (6 x 1)  vector of critical values for the
**                          t-statistic: 1 5 10 90 95 99%
*/
proc (5) = za(x,p,k);
     local lx, res, lhat, var, alpha, za, zt, vc, nobs, tmp ;
     if (p < -1);
        "Error: p cannot be set < -1";
         retp(0,0,0,zeros(6,1),zeros(6,1));
     endif ;
     if (cols(x) > 1);
        "Error: ZA cannot handle a data matrix; cols(x) > 1 (=" cols(x) ")";
         retp(0,0,0,zeros(6,1),zeros(6,1));
     endif ;
     lx      = detrend(trimr(lagn(x,1),1,0),p);
     x       = detrend(trimr(x,1,0),p);
     alpha   = x/lx ;
     res     = x - (lx*alpha);
     lhat    = covarf(res,k);
     tmp     = inv(lx'lx) ;
     nobs    = rows(res) ;
     za      = nobs*((((x'lx)-(rows(res)*lhat))*tmp)-1.00);
     var     = ((res'res)/nobs) + 2*lhat ;
     vc      = var*tmp ;
     zt      = (za/nobs)/sqrt(diag(vc));
     retp(alpha,za,zt,zacrit(nobs,p),ztcrit(nobs,p));
endp ;
/*
** CZA
**
** Purpose: Computes Phillips Za and Zt statistics, applied to the residuals of
**          a cointegrating regression, after allowing for deterministic
**          trends of order p.
**
** Format:  {alpha, Za, Zt, ZaCrit, ZtCrit} = cza(y,x,p,l);
**
** Input:   y     -- dependent variable
**
**          x     -- explanatory variables
**
**          p     -- order of the time-polynomial to include in the
**                   fitted regression.  Set p = -1 for no deterministic
**                   part.
**
**          l     -- number of auto-correlations to use when computing the
**                   spectrum(@0).
**
**
** Output:  alpha       --  estimate of the autoregressive parameter;
**
**          Za          --  Za statistic
**
**          Zt          --  Zt statistic
**
**          rZaCrit     --  (6 x 1)  vector of critical values for the
**                          a-statistic: 1 5 10 90 95 99%
**
**          rZtCrit     --  (6 x 1)  vector of critical values for the
**                          t-statistic: 1 5 10 90 95 99%
*/
proc (5)=cza(y,x,p,k);
     local  s, n, za1, zt, dum1, dum2, alpha;
     dum1  = zeros(6,1) ;
     dum2  = zeros(6,1) ;
     alpha = 0 ;
     za1   = 0 ;
     zt    = 0 ;
     if (p < -1);
        "Error: p cannot be < -1";
         retp(0,0,0,dum1,dum2);
     endif ;
     y       =  detrend(y,p);
     x       =  detrend(x,p);
     s       =  y - x*(y/x);
     n       =  rows(s) ;
     {alpha, za1, zt, dum1, dum2} = za(s,0,k);
retp(alpha,za1,zt,rzacrit(n,cols(x),p),rztcrit(n,cols(x),p));
endp;
/*
** SW_CRITICAL values
**
** Purpose:    Returns critical values for the Stock Watson Procedure
**
**
** Format:     c-values = c_sw(n,p);
**
**             n     -- dimension of the system
**             p     -- order of the time-polynomoal in the fitted regression
**
*/
proc c_sw(n,p) ;
     local jc, i ;
     let jc[35,6] =
  -13.3203   -7.90074   -5.68767   0.931179    1.29862    1.98081
  -19.8270   -13.7251   -11.0755  -0.862642  -0.164026    1.08285
  -28.9388   -21.2162   -17.9117   -3.66203   -2.57101  -0.785605
  -36.1372   -27.7289   -24.1184   -6.77661   -5.39872   -3.08756
  -41.7662   -33.3775   -29.2523   -9.59716   -7.88770   -5.18416
  -48.5009   -39.1753   -34.7293   -12.5981   -10.6578   -7.71254
  -54.7452   -44.7431   -40.1475   -15.8332   -13.5980   -10.1034
  -24.1694   -17.4041   -14.0011   -1.34121  -0.675043   0.216183
  -30.3486   -22.8687   -19.2077   -3.96148   -2.94051   -1.58208
  -38.5394   -30.3688   -26.5009   -7.70250   -6.39894   -4.50105
  -46.3520   -36.9254   -32.6648   -11.1637   -9.53160   -7.17430
  -53.7001   -43.5059   -38.2381   -14.8370   -12.9377   -9.58422
  -58.4497   -48.4860   -43.5082   -18.3258   -16.0107   -12.5003
  -64.6997   -54.2080   -49.2730   -21.8619   -19.4758   -15.6027
  -33.5131   -25.8869   -21.7689   -5.01961   -3.90496   -2.35839
  -38.7908   -30.8022   -26.9233   -8.08677   -6.73112   -4.83394
  -46.7257   -38.3314   -34.4585   -12.3999   -10.7383   -8.01409
  -55.2815   -45.0332   -40.0670   -16.5618   -14.4237   -11.2332
  -62.3235   -51.4318   -46.6842   -20.7364   -18.4388   -15.0289
  -68.4246   -56.8563   -52.2014   -24.2596   -21.8186   -18.2722
  -73.9199   -62.7270   -57.4913   -28.4254   -25.6386   -21.1985
  -41.9612   -33.7871   -29.5294   -9.06114   -7.60418   -5.52542
  -48.1227   -38.9531   -34.5175   -12.4327   -10.4811   -8.06809
  -55.6054   -46.0721   -40.9803   -17.4810   -15.5728   -12.5394
  -62.4136   -52.5681   -47.7474   -21.8013   -19.5115   -15.5649
  -70.1908   -58.5536   -53.4159   -25.9875   -23.4269   -19.4836
  -76.1623   -65.5816   -59.8560   -29.9115   -26.9531   -22.9176
  -83.6880   -70.9083   -65.3731   -34.8047   -31.5040   -26.8843
  -50.5217   -41.3236   -36.9087   -13.6822   -11.9771   -9.35654
  -55.3076   -46.3877   -41.9660   -17.5556   -15.5670   -12.2844
  -65.7127   -54.1185   -48.7697   -22.0346   -19.7357   -16.0502
  -72.7761   -60.6057   -55.2194   -27.1912   -24.4528   -20.5812
  -78.4725   -67.0663   -61.3885   -31.5129   -28.5568   -24.1560
  -83.7687   -73.1045   -67.1595   -35.8531   -32.7386   -27.7290
  -89.6184   -78.5531   -71.9555   -39.8177   -36.4714   -31.8706  ;
   if ((p>5) OR (p<-1));
       retp((0~0~0~0~0~0)');
   endif ;
   if ((n > 5) OR (n < 1));
       retp((0~0~0~0~0~0)');
   endif ;
   i = (n-1)*7 + p + 2 ;
retp(jc[i,.]');
endp ;
/*
** SW
**
** Purpose: Computes the Stock and Watson SW statistic for co-integration
**
** Format:  {sw, c_sw} = sw(y,p,l);
**
** Input:   y     -- matrix of integrated variables (nobs x k)
**
**          p     -- order of the time-polynomial to include in the
**                   fitted regression.  Set p = -1 for no deterministic
**                   part.
**
**          l     -- number of auto-correlations to use when computing the
**                   spectrum(@0).
**
** Output:  sw    -- SW statistic using minimum eigen value.
**          c_sw  -- (6 x 1) vector containing the critical values of the SW
**                   statistic: {1%, 5%, 10%, 90%, 95%, 99%};
*/
proc (2) = sw(x,p,k);
     local lx, res, lhat, rstar,rp, ip,f;
     lx      = detrend(trimr(lagn(x,1),1,0),p);
     x       = detrend(trimr(x,1,0),p);
     res     = x - lx*(x/lx);
     lhat    = covarf(res,k)';
     rstar   = (x'lx - (rows(x)*lhat))*inv(lx'lx);
     {rp,ip} = eigrg(rstar);
     if ( _eigerr NE 0) ;
        "WARNING:_eigerr NOT zero! eigerr = " _eigerr ;
     endif ;
     rp      = -sortc(-rp,1);
retp(rows(x)*(rp-1),c_sw(cols(x),p));
endp ;
