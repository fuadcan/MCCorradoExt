/*             TSROBUST.SRC                      RAINER SCHLITTGEN, 30.03.98
**
**   Programs for robust analysis of time series
**
**   Procedure                                                          Line
**   ________________________________________________________________________
**   ACMFILT
**   ACORRB  : robust estimation of autocorrelation function
**   ACOVRB  : robust estimation of autocovariance function
**   ARESTRB : robust fitting of AR process by GM-method
**   MAD      : median of absolute deviations, robust scale estimator
**   PSIHUB, PSIFAI, PSIBIW, PSIHAMP, PSITGH
**            : psi functions for M-estimation
**   SMOOTHRB : smoothing by robust spline
**   TSMEANRB : M-estimator of level of a time series
**   TSREGRBM   : robust regression by Huber's method
**   TSREGRBMG  : robust regression by Krasker Welch's method
**
*/

/*

 > acmfilt
 
 ACM-filtering of n,1 series y  
 by p,1 filter a using psi-function 
 output is y[1],..,y[p],x[p+1],..,x[n] 
*/

PROC (1) = acmfilt(y,a,se,&psi);

  LOCAL aa,dy,ind,m,n,p,s,t,x,psi:PROC;
  n=ROWS(y);
  x = y;
  p=ROWS(a);
  ind=SEQA(1,1,p)';
  aa = a'|((ind[1:p-1]'.==ind[1:p-1])~ZEROS(p-1,1));
  m = ZEROS(p,p); m[1,1] = se; s = se^0.5;
  t=p+1;
  DO WHILE t <= n;
   x[t] = a'*x[t-ind];
   dy = y[t] - x[t];
   x[t+1-ind] = x[t+1-ind] + psi(dy/s)*m[.,1]/s;
    m = aa*(m - (psi(dy/s)/(dy/s))*m[.,1]*m[.,1]'/s^2)*aa';
   m[1,1] = m[1,1] + se;
   s = m[1,1]^0.5;
   t=t+1;
  ENDO;
 RETP(x);
ENDP;



/*
**> acorrb
**
** Purpose : robust estimation of autocorrelation function 
**           by Huberizing time series with Hubers psi function;
**           using a value-table and linear interpolation, the autocorrelations
**           are transformed as if the time series were Gaussian
**
** Format:  a = acorrb(x,nlag)
**
** Input:   y (n,1) vector, the time series
**          nlag, scalar, the number of lags
**               
** Output: ac (nlag+1,1) vector, the autocorrelations
**
*/

PROC (1) = acorrb(y,nlag);

 LOCAL i,ind,rr,r0,sig;
 rr = _cormat;
 r0 = acovrb(y,nlag);
 r0 = r0/r0[1];
 sig = sign(r0);
 r0 = ABS(r0);
  i = 1;
  DO WHILE i < nlag;
    i = i+1;  
    ind = 1 + SUMC(r0[i] .> rr[.,2]);
    IF ind == 1; r0[i] = -1;
    ELSE;
      r0[i] = rr[ind-1,1] +
            (rr[ind,1]-rr[ind-1,1])*(r0[i]-rr[ind-1,2])/(rr[ind,2]-rr[ind-1,2]);
      r0[i] = sig[i]*r0[i];
    ENDIF;
  ENDO;
 RETP(r0);
ENDP;

/*
**> acovrb
**
** Purpose : robust estimation of autocovariancefunction 
**           by Huberizing time series with Hubers psi function
**
** Format:  a = acovrb(x,nlag)
**
** Input:   y (n,1) vector, the time series
**          nlag, scalar, the number of lags
**               
** Output: ac (nlag+1,1) vector, the autocovariances
**
*/

PROC (1) = acovrb(y,nlag);
  LOCAL n,s,ac;
  n = ROWS(y);
  s = mad(y);
  y = s*psihub((y-tsmeanrb(y,&psihub))/s);
  ac = 1.2945*acove(y,nlag);
  RETP( ac );
ENDP;

/*
**> arestrb
**
** Purpose :  Robust estimation of AR[p]-model via GM-stimation;
**            Start values from YW-fit based on robust acf
**
** Format : {a,cov} = arestrb(x,p)
**
** Input:  x (n,1) vector, the time series
**         p scalar, the order of the AR model to be estimated
**
** Output: a (p,1) vector, the coefficients
**
*/

PROC (2) = arestrb(x,p,co);

  LOCAL acf,beta,betab,beta0,beta1,boot,c,covbeta,d,it,mat,n,r,rd,s,w;
  x = x-tsmeanrb(x,&psihamp);
  n = ROWS(x);
  boot = 0;
  betab={};
  covbeta=miss(0,0);
  c = 1.5*SQRT((p+1)/(n-p-1));
  start:
  acf = acovrb(x,p);
  beta = ldrec(acf);
  beta = beta[p,1:p]';
  mat = tsmat(x,p+1);
  x = mat[.,1];
  mat = mat[.,2:p+1];
  s = mad(x -mat*beta);
  d = MOMENT(mat,0);
  d = SUMC( mat'.*(INVSWP(d)*mat'));
  d =SQRT(d)./(1-d);
  beta1 = beta;
  it = 0;
  DO WHILE ABS(beta1)>(0.00001*(ABS(beta)+0.001)) AND it < 50;
    it=it+1;
    r = x - mat*beta;
    rd = d.*r./s;
    w = (c./ABS(rd))~ONES(ROWS(d),1);
    w = SQRT(MINC(w')); 
    beta1 = OLSQR(r.*w,mat.*w);
    beta = beta+beta1;
 ENDO;
    IF it==50; PRINT "iteration has not converged (it=50)";
    IF boot>0; PRINT "for bootstrap iteration" boot;  ENDIF; 
 ENDIF; 
 IF boot ==0; beta0=beta; 
   ELSE; betab=betab|beta';
 ENDIF;
 IF co==1;
   DO WHILE boot<200;
    boot = boot+1;
    x =  RECSERAR(r[1+RNDU(2*n,1)*ROWS(r)],ZEROS(p,1),beta0);
    x = take(x,-n);   
    GOTO start;
   ENDO;
   covbeta = MOMENT(betab-tsmean(betab)',0)/(ROWS(betab)-1);
 ENDIF;  
 RETP(beta0,covbeta);
ENDP;

/*
**> mad 
** 
**  s = mad(y)  robust scale estimator for univariate time series
**              the factor 1.4826 makes s unbiased in iid samples
**              from  normal distribution
*/

PROC (1) = mad(u);
  LOCAL v;
  v = PACKR(u);
  RETP(1.4826*MEDIAN(ABS(v-MEDIAN(v))));
ENDP;



/**
**   The following procedures are psi-functions for (robust) M-estimation
**   of univariate location parameters:
**   PSIHUB PSIFAIR PSITGH PSIBIW PSIHAMP
**   See H.Spaeth: Math.Softw. zur lin.Reg., p.198
**/


PROC (1) = psihub(u);
  RETP( u.*((u.>-1.5).*(u.<1.5)) +  ((u.>=1.5)-(u.<=-1.5)) );
ENDP;

PROC (1) = psifair(u);
  RETP(u./(1+abs(u/1.4)));
ENDP;

PROC (1) = psitgh(u);
  RETP(1.205*tanh(u/1.205));
ENDP;

PROC (1) = psibiw(u);
  RETP((abs(u).<=4.685).*(u.*(1-(u/4.685)^2)^2));
ENDP;

PROC (1) = psihamp(u);
   LOCAL a,abu,b,c,w;
   a=1.31;  b=2.039;  c=4;
   abu = abs(u);
   w = (abu.<=c).*sign(u).*minc(abu'|(a*ONES(1,ROWS(u)))|abs((c-abu)'*a/(c-b)));
   RETP(w);
ENDP;


/*
**> smoothrb 
**
** {g} = smoothrb(y,beta,&psi); 
** Input   y : time series to be smoothed
**         beta : smoothing parameter
**         psi : psi-function
** Output  g : smooth component
*/

PROC (1) = smoothrb(y,beta,&psi);

   LOCAL c,g,g0,ind,ipp,j,m,n,pp,sigm,x,xg,psi:PROC;
   x=y;
   n = ROWS(y);
   ind = PACKR(x~SEQA(1,1,n));
   ind = ind[.,2];
   j = ZEROS(n,1);
   j[ind] = ONES(ROWS(ind),1);
   pp = ONES(n,5).*(1~-4~6~-4~1);
     pp[1,.] = 0~0~1~-2~1 ; pp[2,1:3]=0~-2~5;
     pp[n-1,3:5]=5~-2~0;  pp[n,.] =1~-2~1~0~0;
   pp =  beta*pp;
   c = bandchol((ZEROS(n,2)~j) + pp[.,1:3]);
   g0 = tsmedian(x);
   g = smoothls(x,beta);
   xg = x-g;
   sigm = mad(xg[ind]);
   do until SQRT(g-g0) < 0.001*sigm;
   g0 = g;
   xg = MISSRV(x-g0,0);
   xg = sigm*psi(xg/sigm);
   g = g0+  bandcholsol(xg-SUMC((pp.*TRIMR(RESHAPE(0|0|g0,5,n+3)',0,3))'),c);
   ENDO;
  RETP(g);
ENDP;

/*
**> tsloess 
**
** {t,g} = tsloess(y); 
** Input   y : time series to be smoothed
** Output  t : sequence of eqally spaced time points (1,2,3....)  
**         g : smooth component
**
*/

PROC 2 = tsloess(y);
   LOCAL t,ts,yhat,ys;
        t=SEQA(1,1,ROWS(y));
        t=PACKR(y~t);
        {yhat,ys,ts}=LOESS(t[.,1],t[.,2]);
  RETP(t,yhat);
ENDP;



/*
**> tsmeanrb
**
**  m = tsmeanrb(y,&psi);   M-estimation of location parameter by
**                          iteratively reweighted least squares
**  Input :  y = (n,1) vector, the time series
**           &psi = psi-function
**  Output : m = robustly estimated level of time series
*/


PROC (1) = tsmeanrb(y,&psi);
  LOCAL d,it,m,s,w,psi:PROC;
  y = PACKR(y);
  m = MEDIAN(y);
  s = mad(y);
  d = s; it = 1;
   DO WHILE (abs(d) > 0.000001*s) AND (it<50);
      w = (y.==m);
      w = (w + psi((y-m)/s))./(w + (y-m)/s);
      d = m-(w'*y)/SUMC(w);
      m = m - d;
      it=it+1;
   ENDO;
  IF it==50; PRINT "iteration has not converged (it=50)"; ENDIF;  
 RETP(m);
ENDP;




/*
**> periodorb
**
** Purpose: robust determination of periodogram of time series y using regression interpr.  
**
** Format:  {f,p} = periodorb(y,&psi)
** Input :  y (n,1) vector, the time series
**          psi literal, the name of one of the psi-functions 
** output : p = ([n/2]+1,1) vector, the periodogram values
**          f = ([n/2]+1,1) vector, the frequancies
**  
** Background:
**  For Fourier frequencies \lambda the LS-approach  
**  \sum [(y_t-\bar{y})-b_1 cos(2 \pi \lambda t)-b_2 sin(2 \pi \lambda t)]^2 -> min
**  leads to solutions \hat{b}_1, \hat{b}_2 which satisfy
**  I(\lambda) = \frac{n}{4}[\hat{b}_1^2 + \hat{b}_2^2]
**  where I(\lambda) is the periodogram. Here the mean is replaced by a m-estimate
**  and the LS-regression by m-estimation 
*/


PROC (2) = periodorb(y,&psi);

  LOCAL beta,beta1,ind,it,m,n,n2,periodo,r,s,u,w,z, psi:PROC;
  m = tsmeanrb(y,&psi);
  y = y-m;
  n = ROWS(y);
  ind = (2*PI/n)*SEQA(1,1,n);
  n2 = TRUNC((n-1)/2) + 1-n%2;
  periodo = (n*m^2)|ZEROS(n2,1);
  u=0;
  DO WHILE  u < n2;
    u=u+1;
    z = COS(ind*u)~SIN(ind*u);
    IF u==n/2; z=(-1)^SEQA(1,1,n); ENDIF;
    beta = OLSQR(y,z);
    s = mad(y-z*beta);   
    beta1=0;
    it=1;
    DO WHILE ABS(beta-beta1)>(0.0001*(ABS(beta)+0.001)) AND it <=10;                                                    
       beta1 = beta;
       r = (y-z*beta)/s;
       w = SQRT( ((r.==0)+psi(r))./((r.==0)+r) );      
       beta = OLSQR(y.*w,z.*w);
       it=it+1;
    ENDO;     
    periodo[u+1] = n*SUMC(beta^2 )/4;    
  ENDO;
  IF 1-n%2; periodo[n/2+1] = 2*periodo[n/2+1]; ENDIF;
  RETP(PI*seqa(0,1/n,n2+1),periodo);
ENDP;


/*  TSREGRBM
**
**  Purpose :  M estimation of linear regression via Hubers algorithm. 
**             LS start estimate
**  Format :  b = tsregrbm(y,x,&psi)
**  Input  :  y: (n,1) vector, dependent variable
**            x: (n,p) matrix, independent variables
**            &psi:  pointer to psi function
**  Output : beta: (p,1) vector, the regression coefficients
**
*/

PROC (1) = tsregrbm(y,x,&psi);

 LOCAL beta,beta1,it,n,s,zziz,psi:PROC;
  n = ROWS(y);
  beta = y/x;
  s = mad(y-x*beta);
  zziz = inv(x'*x)*x';
  beta1=0;
  it=1;
  DO WHILE abs(beta-beta1)>(0.0001*(abs(beta)+0.001)) and it <=5;
                                                    @ improving start estimate @
    beta1=beta;                                     @ using Hubers psi-f. and @
    beta = beta + s*zziz*psihub((y-x*beta)/s);      @ updating scale estimate @
    s = mad(y-x*beta);
    it=it+1;
  ENDO;
  beta1=0;
  it=1 ;
  DO WHILE abs(beta-beta1)>(0.0001*(abs(beta)+0.001)) and it <=20;
                                                    @ final loop with inserted @
    beta1=beta;                                     @ psi-f. and fixed scale   @
    beta = beta + s*zziz*psi((y-x*beta)/s);
    it=it+1;
   ENDO;
 RETP(beta);
ENDP;




/*
@ Autocovariancefunction of Huberized time @
@ series x ( n,1 vector ) for lags 0 to m. @
@ x is transformed with psi function psi   @
@ b is normalisation const. for Gaussian p.@


PROC (1) = acfrob1(x,m,&psi);

  LOCAL b,n,s,y,psi:PROC;
     n = ROWS(x);
     s = mad(x);
     y = s*psi((x-tsmeanrb(x,&psihamp))/s);
     b = SEQA(-3,.01,601);
     b = SUMC((psi(b)^2).*(1/SQRT(2*PI)).*exp(-0.5*b^2))*0.01;
     y = acov(y,m)/b;
  RETP( y );
ENDP;






@ robust determination of pe- @
@ riodogram of time series @
@ using regression interpr.  @
@ and startvalues for spec @
@ robspec starts from 1/n and @
@ ends at [(n-1)/2]/n       @

PROC (2) = periodorob2(&psi,x,robspec);

 LOCAL fcoef,ind,n,n2,rnk,spec,u,x1,z,psi:PROC;
  x1=x-tsmeanrb(x,&psi);
  n=ROWS(x);

  ind=(2*pi/n)*SEQA(1,1,n);
  n2 = ROWS(robspec);
  spec=ZEROS(n2,1);
  fcoef=ZEROS(n2,2);
  rnk = REV(rankindx(robspec,1));
  u=1;
  DO WHILE  u<= n2;
    z=COS(ind*(rnk[u]-1))~SIN(ind*(rnk[u]-1));
    if 1 < rnk[u] and rnk[u] < n2;
      fcoef[rnk[u],.] = tsregrbm(x1,z,&psi)';
      spec[rnk[u]] = n*SUMC( fcoef[rnk[u],.]'^2 )/4;
    elseif rnk[u]==1 ;
      fcoef[1,1] = MEANC(x1)';
      spec[1] = n*fcoef[1,1]^2 ;
    elseif rnk[u] ==  n2;
      fcoef[n2,1] = tsregrbm(x1,z[.,1],&psi);
      spec[n2] = n*fcoef[n2,1]^2;
    ENDIF;
    x1 = x1 - z*fcoef[rnk[u],.]';
    u=u+1;
  ENDO;
  fcoef = (MEANC(x)~0)|fcoef;
  spec = (n*fcoef[1,1]^2)|spec;
  if 1-n%2;
    fcoef = fcoef|(tsregrbm(x,(-1)^SEQA(1,1,n))~0,&psi);
    spec = spec|(n*fcoef[n2+1,1]^2);
  ENDIF;
 RETP(spec,fcoef);
ENDP;

@ robust determination of    @
@ periodogram of time series @
@ using regression interpr.  @
@ separate fit of cos & sin  @

PROC (2) = periodorob3(&psi,x);

  LOCAL fcoef, ind, n, n2, spec,u,psi:PROC;
  x=x-tsmeanrb(x,&psi);
  n=ROWS(x);
  ind=(2*pi/n)*SEQA(1,1,n);
  n2 = trunc((n-1)/2);
  fcoef = (MEANC(x)~0)|ZEROS(n2,2);
  spec = (n*fcoef[1,1]^2)|ZEROS(n2,1);
  u=1;
  DO WHILE  u<= n2;
    fcoef[u+1,.] = tsregrbm(x,COS(ind*u),&psi)~tsregrbm(x,SIN(ind*u),&psi);
    spec[u+1] = n*SUMC(fcoef[u+1,.]'^2)/4;
    u=u+1;
  ENDO;
  if 1-n%2;
    fcoef = fcoef|(tsregrbm(x,(-1)^SEQA(1,1,n))~0,&psi);
    spec = spec|(n*fcoef[n2+1,1]^2);
  ENDIF;
 RETP(spec,fcoef);
ENDP;


@ computes cor of huberized var's from original @
@ cor assuming normal distribution              @

PROC (1) = transc1(r);
 LOCAL f,f1,i,m,x,psix;
  x = SEQA(-3,0.01,601);
  psix = psihub(x);
  f = 0;
  i=1;
  DO WHILE i <= 601;
    f1 = exp(-(0.5/(1-r^2)).*( x^2 - 2*r*x*x[i] + x[i]^2));
    f1 = psix.*psix[i].*f1;
    f = f + SUMC(f1);
    i=i+1;
   ENDO;
 RETP(  (1/(2*PI*(1-r^2)^.5)).*f*(0.01^2)/0.7725 );
ENDP;







PROC (2) = PERIODO5(&psi,x);                      @ robust determination of    @
                                                  @ periodogram of time series @
  LOCAL fcoef, ind, n, n2, spec,u,z,psi:PROC;     @ using regression interpr.  @
  x=x-tsmeanrb(x,&psi);
  n=ROWS(x);
  ind=(2*pi/n)*SEQA(1,1,n);
  n2 = trunc((n-1)/2);
  fcoef = (MEANC(x)~0)|ZEROS(n2,2);
  spec = (n*fcoef[1,1]^2)|ZEROS(n2,1);
  u=1;
  DO WHILE  u<= n2;
    z=COS(ind*u)~SIN(ind*u);
    fcoef[u+1,.] =  tsregrbm(x,z,&psi)' ;
    spec[u+1] = n*SUMC(fcoef[u+1,.]'^2 )/4;
     u=u+1;
  ENDO;
  if 1-n%2;
    fcoef = fcoef|(tsregrbm(x,(-1)^SEQA(1,1,n))~0,&psi);
    spec = spec|(n*fcoef[n2+1,1]^2);
  ENDIF;
 RETP(spec,fcoef);
ENDP;


PROC (2) = PERIODO6(&psi,x,robspec);             @ robust determination of pe- @
                                                 @ riodogram of time series @
 LOCAL fcoef,ind,n,n2,rnk,spec,u,x1,z,psi:PROC;  @ using regression interpr.  @
  x1=x-tsmeanrb(x,&psi);                         @ and startvalues for spec @
  n=ROWS(x);                                     @ robspec starts from 1/n and @
                                                 @ ends at [(n-1)/2]/n       @
  ind=(2*pi/n)*SEQA(1,1,n);
  n2 = ROWS(robspec);
  spec=ZEROS(n2,1);
  fcoef=ZEROS(n2,2);
  rnk = REV(rankindx(robspec,1));
  u=1;
  DO WHILE  u<= n2;
    z=COS(ind*(rnk[u]-1))~SIN(ind*(rnk[u]-1));
    if 1 < rnk[u] and rnk[u] < n2;
      fcoef[rnk[u],.] = tsregrbm(x1,z,&psi)';
      spec[rnk[u]] = n*SUMC( fcoef[rnk[u],.]'^2 )/4;
    elseif rnk[u]==1 ;
      fcoef[1,1] = MEANC(x1)';
      spec[1] = n*fcoef[1,1]^2 ;
    elseif rnk[u] ==  n2;
      fcoef[n2,1] = tsregrbm(x1,z[.,1],&psi);
      spec[n2] = n*fcoef[n2,1]^2;
    ENDIF;
    x1 = x1 - z*fcoef[rnk[u],.]';
    u=u+1;
  ENDO;
  fcoef = (MEANC(x)~0)|fcoef;
  spec = (n*fcoef[1,1]^2)|spec;
  if 1-n%2;
    fcoef = fcoef|(tsregrbm(x,(-1)^SEQA(1,1,n))~0,&psi);
    spec = spec|(n*fcoef[n2+1,1]^2);
  ENDIF;
 RETP(spec,fcoef);
ENDP;

PROC (2) = PERIODO5(&psi,x);                      @ robust determination of    @
                                                  @ periodogram of time series @
  LOCAL fcoef, ind, n, n2, spec,u,psi:PROC;       @ using regression interpr.  @
  x=x-tsmeanrb(x,&psi);                           @ separate fit of cos & sin  @
  n=ROWS(x);
  ind=(2*pi/n)*SEQA(1,1,n);
  n2 = trunc((n-1)/2);
  fcoef = (MEANC(x)~0)|ZEROS(n2,2);
  spec = (n*fcoef[1,1]^2)|ZEROS(n2,1);
  u=1;
  DO WHILE  u<= n2;
    fcoef[u+1,.] = tsregrbm(x,COS(ind*u),&psi)~tsregrbm(x,SIN(ind*u),&psi);
    spec[u+1] = n*SUMC(fcoef[u+1,.]'^2)/4;
    u=u+1;
  ENDO;
  if 1-n%2;
    fcoef = fcoef|(tsregrbm(x,(-1)^SEQA(1,1,n))~0,&psi);
    spec = spec|(n*fcoef[n2+1,1]^2);
  ENDIF;
 RETP(spec,fcoef);
ENDP;

*/

