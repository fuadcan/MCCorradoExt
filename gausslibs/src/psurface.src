/*
** psurface.src - Publication Quality Graphics Support.
** (C) Copyright 1988-2001 by Aptech Systems, Inc.
** All Rights Reserved.
**
** This Software Product is PROPRIETARY SOURCE CODE OF APTECH
** SYSTEMS, INC.    This File Header must accompany all files using
** any portion, in whole or in part, of this Source Code.   In
** addition, the right to create such files is strictly limited by
** Section 2.A. of the GAUSS Applications License Agreement
** accompanying this Software Product.
**
** If you wish to distribute any portion of the proprietary Source
** Code, in whole or in part, you must first obtain written
** permission from Aptech Systems.
**
**> surface
**
**  Purpose:    Graphs a 3 dimensional surface.
**
**  Format:     surface(x,y,z);
**
**  Inputs:     x    1xK vector, the min and max values for the X axis.
**
**              y    Nx1 vector, the min and max values for the Y axis.
**
**              z    NxK matrix, heights of the mesh above the X-Y plane.
**
**  See Also:   view, volume
*/

#include pgraph.ext

proc 0 = surface(x,y,z);
    /* ------------------------------------------------------ */
    local colorq,msgstr,psym,psymnum,psym3d,nsym3d,msgnum,n,k,sca,gcode,
        linenum,mem,arrownum,arrow,vol,pline3d,npline3d,fontnum,fntsize,
        opt,pline,frame,tmp,arrow3d,narrow3d,pnum,paxes,gpcpath,pmsgctl;
    local minx,maxx,miny,maxy,minz,maxz,qsig,qfield,qprec,qxpow,qxorig,
        qxstep,qmax,qmint,qlab,qypow,qyorig,qystep,qzpow,qzorig,
        qzstep,qzmax,pzclr,pnzclr,i,qxmax,qymax,qxprec,qyprec,qzprec,
        xformat,yformat,zformat;
    local xdatmin,ydatmin,xdatmax,ydatmax,xfact,yfact;
    /* ------------------------------------------------------ */

    _pqgtype = { 11, 2 };           /* graph type surface, 3d */
    { frame,paxes,pnum,gpcpath } = _cmnfilt;

    /* ---- test input variables and take appropriate action ---- */

    /* test for missings in x or y */
    if ismiss(x) or ismiss(y) or ismiss(z);
        errorlog "ERROR: There are missing values in the data.";
        end;
    endif;

    /* Dimensions of data matrices. */
    k = rows(y);
    n = cols(x);

    if cols(y) /= 1 or rows(x) /= 1 or k /= rows(z) or n /= cols(z);
        errorlog "ERROR: Matrices not conformable";
        end;
    endif;

    { minx,maxx } = _pcartx(_pworld,x);
    { miny,maxy } = _pcarty(_pworld,y);
    { minz,maxz } = _pcartz(_pworld,z);

    /* ensure data is sequentially increasing */
    if _decreas(x',n);
        tmp = minx;
        minx = maxx;
        maxx = tmp;
    endif;
    if _decreas(y,k);
        tmp = miny;
        miny = maxy;
        maxy = tmp;
    endif;

    opt = _poptic;
    _poptic = 2;
/*
    if rows(_pxscale) > 1;
        if _pxscale[4] < 1;
            _pxscale[4] = 1;
        endif;
    endif;
*/
    { qsig,qfield,qxprec,qxpow,qxorig,qxstep,qxmax,qmint,qlab } =
        _paxnum(pnum[1],minx,maxx,_pxsci,_pxscale,_pxpmax);

    { qsig,qfield,qyprec,qypow,qyorig,qystep,qymax,qmint,qlab } =
        _paxnum(pnum[2],miny,maxy,_pysci,_pyscale,_pypmax);

    if rows(_pzscale) > 1;
        if _pzscale[4] < 1;
            _pzscale[4] = 1;
        endif;
    endif;
    { qsig,qfield,qzprec,qzpow,qzorig,qzstep,qzmax,qmint,qlab } =
        _paxnum(pnum[3],minz,maxz,_pzsci,_pzscale,_pzpmax);
    _poptic = opt;

    if qxpow;
        x = x * 10^(-qxpow);
        minx = minx * 10^(-qxpow);
        maxx = maxx * 10^(-qxpow);
        _pxlabel = _pxlabel $+ "  x 10" $+ ftos(qxpow,"[%*.*lf]",1,0);
    endif;
    if qypow;
        y = y * 10^(-qypow);
        miny = miny * 10^(-qypow);
        maxy = maxy * 10^(-qypow);
        _pylabel = _pylabel $+ "  x 10" $+ ftos(qypow,"[%*.*lf]",1,0);
    endif;
    if qzpow;
        z = z * 10^(-qzpow);
        minz = minz * 10^(-qzpow);
        maxz = maxz * 10^(-qzpow);
        _pzlabel = _pzlabel $+ "  x 10" $+ ftos(qzpow,"[%*.*lf]",1,0);
    endif;

    xdatmin = minc(minc(x));
    ydatmin = minc(minc(y));
    xdatmax = maxc(maxc(x));
    ydatmax = maxc(maxc(y));

    sca = minx   | maxx   | qxstep | xdatmin | xdatmax |
          miny   | maxy   | qystep | ydatmin | ydatmax |
          qzorig | qzstep | qzmax;

    if strlen(_pxfmt) < 2;
        xformat = "%1." $+ ftos(qxprec,"%*.*lf",1,0) $+ "lf";
    else;
        xformat = lower(_pxfmt);
    endif;

    if strlen(_pyfmt) < 2;
        yformat = "%1." $+ ftos(qyprec,"%*.*lf",1,0) $+ "lf";
    else;
        yformat = lower(_pyfmt);
    endif;
    if strlen(_pzfmt) < 2;
        zformat = "%1." $+ ftos(qzprec,"%*.*lf",1,0) $+ "lf";
    else;
        zformat = lower(_pzfmt);
    endif;

    _setpage();

    { msgstr,msgnum,colorq } = _txtfilt;
    { pline,linenum,arrow,arrownum,psym,psymnum } = _linfilt;
    { psym3d,nsym3d,pline3d,npline3d,arrow3d,narrow3d } = _3dfilt;

    { pline,pmsgctl,psym } = _pwrscal(qxpow,qypow,pline,_pmsgctl,psym);
    { pline3d,arrow3d,psym3d } =
          _pwrsc3d(qxpow,qypow,qzpow,pline3d,arrow3d,psym3d);

    if _pvolume == 0;
        vol = _volum3d( _range(x), _range(y), _range(z) );
    elseif rows(_pvolume) == 3 and cols(_pvolume) == 1;
        vol = _pvolume;
    else;
        errorlog "ERROR: Invalid _PVOLUME vector";
        end;
    endif;

    if rows(_psurf) == 4;
        _psurf = _psurf[1] | _psurf[3];
    endif;

    /* setup z colors */
    pzclr = _pzclr;
    pnzclr = rows(pzclr);
    if pnzclr > 1;
        if cols(pzclr) == 1;        /* only colors specified; calc z levels */
            i = (maxc(maxc(z)) - minc(minc(z))) / pnzclr;
            pzclr = seqa(minc(minc(z)),i,pnzclr) ~ pzclr;
        else;       /* both specified; check for missing value */
            if scalmiss(pzclr[1,1]);
                pzclr[1,1] = minc(minc(z));
            endif;
        endif;
    elseif pnzclr == 1;
        if cols(pzclr) == 1;
            pzclr = minc(minc(z)) ~ _pzclr;
        endif;
    else;
        errorlog "Error. Z color matrix invalid.";
    endif;

    /* a null byte is appended to _plegstr in _cmnfilt() */
    if _plegstr $== "\0";
        i = 1;
        _plegstr = "";
        do while i <= pnzclr;
            _plegstr = _plegstr $+ ftos(pzclr[i,1],"%*.*lf",1,_pzpmax)$+"\0";
            i = i + 1;
        endo;
    endif;

    { fontnum,mem,fntsize } = _fontsiz();

    /* psurface <=> 7 */

    GraphSEv3(z,n,k,sca,vol,_pview,_ptitle,_pxlabel,_pylabel,
        _pzlabel,_ptek,_pfonts,fontnum,fntsize,_pbox,frame,paxes,xformat,
        yformat,zformat,msgstr,pmsgctl,msgnum,_paxht,_pnumht,_ptitlht,
        _pagesiz,_pageshf,_plotsiz,_plotshf,_protate,_psurf,_pticout,
        colorq,psym,psymnum,psym3d,nsym3d,pline,linenum,pline3d,npline3d,
        arrow,arrownum,arrow3d,narrow3d,_pdate,pnum,_plegctl,_plegstr,pzclr,
        pnzclr,_pnotify,_pappend,_pmargin,_pcwin,_pncwin,_pcrop,gpcpath,7);

    clear z,gcode;

    if _pscreen and _pinbegwind == 0;
        rerun;
    endif;

endp;
